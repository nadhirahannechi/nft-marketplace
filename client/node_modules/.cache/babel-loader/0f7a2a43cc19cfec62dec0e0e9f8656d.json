{"ast":null,"code":"var _jsxFileName = \"/home/ubuntu/MERN-boilerPlate/client/src/component/user/index.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from \"react\"; // import Wallet from \"../solanaWallet/wallet\"\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Index = () => {\n  _s();\n\n  let [cnxnStatus, setCnxnStatus] = useState(window.solana.isConnected ? \"Disconnect\" : \"Connect\");\n  const isPhantomInstalled = window.solana && window.solana.isPhantom;\n  console.log(); // const getProvider = () => {\n  //   if (\"solana\" in window) {\n  //     const provider = window.solana;\n  //     if (provider.isPhantom) {\n  //       return provider;\n  //     }\n  //   }\n  //   window.open(\"https://phantom.app/\", \"_blank\");\n  // };\n\n  const connectAction = () => {\n    if (!window.solana.isConnected) {\n      window.solana.connect().then(() => {\n        var _window$solana$public;\n\n        console.log((_window$solana$public = window.solana.publicKey) === null || _window$solana$public === void 0 ? void 0 : _window$solana$public.toString());\n        setCnxnStatus('Disconnect');\n      });\n    } else window.solana.disconnect().then(() => {\n      // console.log(window.solana.publicKey?.toString());\n      setCnxnStatus('Connect');\n    });\n  };\n\n  useEffect(() => {// if (isPhantomInstalled)\n    // Will either automatically connect to Phantom, or do nothing.\n    // window.solana.connect();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n      children: \"user panel\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => {\n          connectAction();\n        },\n        children: cnxnStatus\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 49,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Index, \"46T/ZqSu/W35vp3EoU9hkXp01z0=\");\n\n_c = Index;\nexport default Index;\n\nvar _c;\n\n$RefreshReg$(_c, \"Index\");","map":{"version":3,"sources":["/home/ubuntu/MERN-boilerPlate/client/src/component/user/index.tsx"],"names":["React","useEffect","useState","Index","cnxnStatus","setCnxnStatus","window","solana","isConnected","isPhantomInstalled","isPhantom","console","log","connectAction","connect","then","publicKey","toString","disconnect"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C,C,CAEA;;;;AAGA,MAAMC,KAAK,GAAG,MAAM;AAAA;;AAElB,MAAI,CAACC,UAAD,EAAcC,aAAd,IAA+BH,QAAQ,CAAEI,MAAM,CAACC,MAAP,CAAcC,WAAd,GAA4B,YAA5B,GAA2C,SAA7C,CAA3C;AACA,QAAMC,kBAAkB,GAAGH,MAAM,CAACC,MAAP,IAAiBD,MAAM,CAACC,MAAP,CAAcG,SAA1D;AACFC,EAAAA,OAAO,CAACC,GAAR,GAJoB,CAMlB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,QAAMC,aAAa,GAAG,MAAM;AAC1B,QAAG,CAACP,MAAM,CAACC,MAAP,CAAcC,WAAlB,EAA+B;AAC7BF,MAAAA,MAAM,CAACC,MAAP,CAAcO,OAAd,GAAwBC,IAAxB,CAA6B,MAAI;AAAA;;AAC/BJ,QAAAA,OAAO,CAACC,GAAR,0BAAYN,MAAM,CAACC,MAAP,CAAcS,SAA1B,0DAAY,sBAAyBC,QAAzB,EAAZ;AACAZ,QAAAA,aAAa,CAAC,YAAD,CAAb;AACD,OAHD;AAID,KALD,MAOEC,MAAM,CAACC,MAAP,CAAcW,UAAd,GAA2BH,IAA3B,CAAgC,MAAI;AAClC;AACAV,MAAAA,aAAa,CAAC,SAAD,CAAb;AAED,KAJD,CADG;AAUN,GAjBD;;AAmBAJ,EAAAA,SAAS,CAAC,MAAM,CACd;AACA;AACA;AACD,GAJQ,EAIN,EAJM,CAAT;AAOE,sBACA;AAAA,4BACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADF,eAEE;AAAA,6BACE;AAAQ,QAAA,OAAO,EAAE,MAAI;AAACY,UAAAA,aAAa;AAAG,SAAtC;AAAA,kBACGT;AADH;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,YAFF;AAAA;AAAA;AAAA;AAAA;AAAA,UADA;AAWH,CArDD;;GAAMD,K;;KAAAA,K;AAsDN,eAAeA,KAAf","sourcesContent":["import React, { useEffect, useState } from \"react\";\n\n// import Wallet from \"../solanaWallet/wallet\"\n  declare const window: any;\n\nconst Index = () => {\n\n  let [cnxnStatus , setCnxnStatus] = useState (window.solana.isConnected ? \"Disconnect\" : \"Connect\");\n  const isPhantomInstalled = window.solana && window.solana.isPhantom;\nconsole.log();\n\n  // const getProvider = () => {\n  //   if (\"solana\" in window) {\n  //     const provider = window.solana;\n  //     if (provider.isPhantom) {\n  //       return provider;\n  //     }\n  //   }\n  //   window.open(\"https://phantom.app/\", \"_blank\");\n  // };\n\n  const connectAction = () => {\n    if(!window.solana.isConnected) {\n      window.solana.connect().then(()=>{\n        console.log(window.solana.publicKey?.toString());\n        setCnxnStatus('Disconnect');\n      });\n    }\n    else (\n      window.solana.disconnect().then(()=>{\n        // console.log(window.solana.publicKey?.toString());\n        setCnxnStatus('Connect');\n\n      })\n    )\n    \n\n\n  }\n\n  useEffect(() => {\n    // if (isPhantomInstalled)\n    // Will either automatically connect to Phantom, or do nothing.\n    // window.solana.connect();\n  }, []);\n\n  \n    return (\n    <div>\n      <h3>user panel</h3>\n      <div>\n        <button onClick={()=>{connectAction()}} > \n          {cnxnStatus}\n        </button>\n      </div>\n      {/* <Wallet></Wallet> */}\n    </div>\n  )\n};\nexport default Index\n\n"]},"metadata":{},"sourceType":"module"}