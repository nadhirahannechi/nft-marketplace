{"ast":null,"code":"var _jsxFileName = \"/home/ubuntu/MERN-boilerPlate/client/src/component/user/index.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect } from \"react\"; // import Wallet from \"../solanaWallet/wallet\"\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Index = () => {\n  _s();\n\n  let cnxnStatus = window.solana.isConnected ? \"Disconnect\" : \"Connect\";\n  const isPhantomInstalled = window.solana && window.solana.isPhantom;\n  console.log(); // const getProvider = () => {\n  //   if (\"solana\" in window) {\n  //     const provider = window.solana;\n  //     if (provider.isPhantom) {\n  //       return provider;\n  //     }\n  //   }\n  //   window.open(\"https://phantom.app/\", \"_blank\");\n  // };\n\n  const connect = () => {\n    window.solana.connect().then(() => {\n      console.log(window.solana.publicKey.toString());\n      cnxnStatus = \"Disconnect\";\n    });\n  };\n\n  useEffect(() => {// if (isPhantomInstalled)\n    // Will either automatically connect to Phantom, or do nothing.\n    // window.solana.connect();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n      children: \"user panel\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => {\n          connect();\n        },\n        children: cnxnStatus\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 41,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Index, \"OD7bBpZva5O2jO+Puf00hKivP7c=\");\n\n_c = Index;\nexport default Index;\n\nvar _c;\n\n$RefreshReg$(_c, \"Index\");","map":{"version":3,"sources":["/home/ubuntu/MERN-boilerPlate/client/src/component/user/index.tsx"],"names":["React","useEffect","Index","cnxnStatus","window","solana","isConnected","isPhantomInstalled","isPhantom","console","log","connect","then","publicKey","toString"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC,C,CAEA;;;;AAGA,MAAMC,KAAK,GAAG,MAAM;AAAA;;AAElB,MAAIC,UAAU,GAAGC,MAAM,CAACC,MAAP,CAAcC,WAAd,GAA4B,YAA5B,GAA2C,SAA5D;AACA,QAAMC,kBAAkB,GAAGH,MAAM,CAACC,MAAP,IAAiBD,MAAM,CAACC,MAAP,CAAcG,SAA1D;AACFC,EAAAA,OAAO,CAACC,GAAR,GAJoB,CAMlB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,QAAMC,OAAO,GAAG,MAAM;AACpBP,IAAAA,MAAM,CAACC,MAAP,CAAcM,OAAd,GAAwBC,IAAxB,CAA6B,MAAI;AAC/BH,MAAAA,OAAO,CAACC,GAAR,CAAYN,MAAM,CAACC,MAAP,CAAcQ,SAAd,CAAwBC,QAAxB,EAAZ;AACAX,MAAAA,UAAU,GAAG,YAAb;AAED,KAJD;AAQD,GATD;;AAWAF,EAAAA,SAAS,CAAC,MAAM,CACd;AACA;AACA;AACD,GAJQ,EAIN,EAJM,CAAT;AAOE,sBACA;AAAA,4BACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADF,eAEE;AAAA,6BACE;AAAQ,QAAA,OAAO,EAAE,MAAI;AAACU,UAAAA,OAAO;AAAG,SAAhC;AAAA,kBACGR;AADH;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,YAFF;AAAA;AAAA;AAAA;AAAA;AAAA,UADA;AAWH,CA7CD;;GAAMD,K;;KAAAA,K;AA8CN,eAAeA,KAAf","sourcesContent":["import React, { useEffect } from \"react\";\n\n// import Wallet from \"../solanaWallet/wallet\"\n  declare const window: any;\n\nconst Index = () => {\n\n  let cnxnStatus = window.solana.isConnected ? \"Disconnect\" : \"Connect\";\n  const isPhantomInstalled = window.solana && window.solana.isPhantom;\nconsole.log();\n\n  // const getProvider = () => {\n  //   if (\"solana\" in window) {\n  //     const provider = window.solana;\n  //     if (provider.isPhantom) {\n  //       return provider;\n  //     }\n  //   }\n  //   window.open(\"https://phantom.app/\", \"_blank\");\n  // };\n\n  const connect = () => {\n    window.solana.connect().then(()=>{\n      console.log(window.solana.publicKey.toString());\n      cnxnStatus = \"Disconnect\"\n\n    });\n    \n\n\n  }\n\n  useEffect(() => {\n    // if (isPhantomInstalled)\n    // Will either automatically connect to Phantom, or do nothing.\n    // window.solana.connect();\n  }, []);\n\n  \n    return (\n    <div>\n      <h3>user panel</h3>\n      <div>\n        <button onClick={()=>{connect()}} > \n          {cnxnStatus}\n        </button>\n      </div>\n      {/* <Wallet></Wallet> */}\n    </div>\n  )\n};\nexport default Index\n\n"]},"metadata":{},"sourceType":"module"}