{"ast":null,"code":"var _jsxFileName = \"/home/ubuntu/MERN-boilerPlate/client/src/component/user/index.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from \"react\"; // import Wallet from \"../solanaWallet/wallet\"\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Index = () => {\n  _s();\n\n  var _window$solana$public;\n\n  let [cnxnStatus, setCnxnStatus] = useState(window.solana.isConnected ? \"Disconnect\" : \"Connect\");\n  let [pubkey, setPubkey] = useState((_window$solana$public = window.solana.publicKey) === null || _window$solana$public === void 0 ? void 0 : _window$solana$public.toString());\n  const isPhantomInstalled = window.solana && window.solana.isPhantom;\n  console.log(); // const getProvider = () => {\n  //   if (\"solana\" in window) {\n  //     const provider = window.solana;\n  //     if (provider.isPhantom) {\n  //       return provider;\n  //     }\n  //   }\n  //   window.open(\"https://phantom.app/\", \"_blank\");\n  // };\n\n  const connectAction = () => {\n    if (!window.solana.isConnected) {\n      window.solana.connect().then(() => {\n        var _window$solana$public2, _window$solana$public3;\n\n        console.log((_window$solana$public2 = window.solana.publicKey) === null || _window$solana$public2 === void 0 ? void 0 : _window$solana$public2.toString());\n        setCnxnStatus('Disconnect');\n        setPubkey((_window$solana$public3 = window.solana.publicKey) === null || _window$solana$public3 === void 0 ? void 0 : _window$solana$public3.toString());\n      });\n    } else window.solana.disconnect().then(() => {\n      // console.log(window.solana.publicKey?.toString());\n      setCnxnStatus('Connect');\n    });\n  };\n\n  useEffect(() => {\n    var _window$solana$public4;\n\n    // if (isPhantomInstalled)\n    // Will either automatically connect to Phantom, or do nothing.\n    // window.solana.connect();\n    setPubkey((_window$solana$public4 = window.solana.publicKey) === null || _window$solana$public4 === void 0 ? void 0 : _window$solana$public4.toString());\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n      children: \"user panel\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: pubkey\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => {\n          connectAction();\n        },\n        children: cnxnStatus\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 53,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Index, \"TwEBZtj+VWAsUMrEsMV1KSe07wY=\");\n\n_c = Index;\nexport default Index;\n\nvar _c;\n\n$RefreshReg$(_c, \"Index\");","map":{"version":3,"sources":["/home/ubuntu/MERN-boilerPlate/client/src/component/user/index.tsx"],"names":["React","useEffect","useState","Index","cnxnStatus","setCnxnStatus","window","solana","isConnected","pubkey","setPubkey","publicKey","toString","isPhantomInstalled","isPhantom","console","log","connectAction","connect","then","disconnect"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C,C,CAEA;;;;AAGA,MAAMC,KAAK,GAAG,MAAM;AAAA;;AAAA;;AAElB,MAAI,CAACC,UAAD,EAAcC,aAAd,IAA+BH,QAAQ,CAAEI,MAAM,CAACC,MAAP,CAAcC,WAAd,GAA4B,YAA5B,GAA2C,SAA7C,CAA3C;AACA,MAAI,CAACC,MAAD,EAAUC,SAAV,IAAuBR,QAAQ,0BAAEI,MAAM,CAACC,MAAP,CAAcI,SAAhB,0DAAE,sBAAyBC,QAAzB,EAAF,CAAnC;AACA,QAAMC,kBAAkB,GAAGP,MAAM,CAACC,MAAP,IAAiBD,MAAM,CAACC,MAAP,CAAcO,SAA1D;AACFC,EAAAA,OAAO,CAACC,GAAR,GALoB,CAOlB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,QAAMC,aAAa,GAAG,MAAM;AAC1B,QAAG,CAACX,MAAM,CAACC,MAAP,CAAcC,WAAlB,EAA+B;AAC7BF,MAAAA,MAAM,CAACC,MAAP,CAAcW,OAAd,GAAwBC,IAAxB,CAA6B,MAAI;AAAA;;AAC/BJ,QAAAA,OAAO,CAACC,GAAR,2BAAYV,MAAM,CAACC,MAAP,CAAcI,SAA1B,2DAAY,uBAAyBC,QAAzB,EAAZ;AACAP,QAAAA,aAAa,CAAC,YAAD,CAAb;AACAK,QAAAA,SAAS,2BAACJ,MAAM,CAACC,MAAP,CAAcI,SAAf,2DAAC,uBAAyBC,QAAzB,EAAD,CAAT;AACD,OAJD;AAKD,KAND,MAQEN,MAAM,CAACC,MAAP,CAAca,UAAd,GAA2BD,IAA3B,CAAgC,MAAI;AAClC;AACAd,MAAAA,aAAa,CAAC,SAAD,CAAb;AAED,KAJD,CADG;AAUN,GAlBD;;AAoBAJ,EAAAA,SAAS,CAAC,MAAM;AAAA;;AACd;AACA;AACA;AACAS,IAAAA,SAAS,2BAACJ,MAAM,CAACC,MAAP,CAAcI,SAAf,2DAAC,uBAAyBC,QAAzB,EAAD,CAAT;AAED,GANQ,EAMN,EANM,CAAT;AASE,sBACA;AAAA,4BACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADF,eAEE;AAAA,8BACE;AAAA,kBAAKH;AAAL;AAAA;AAAA;AAAA;AAAA,cADF,eAEE;AAAQ,QAAA,OAAO,EAAE,MAAI;AAACQ,UAAAA,aAAa;AAAG,SAAtC;AAAA,kBAEGb;AAFH;AAAA;AAAA;AAAA;AAAA,cAFF;AAAA;AAAA;AAAA;AAAA;AAAA,YAFF;AAAA;AAAA;AAAA;AAAA;AAAA,UADA;AAaH,CA3DD;;GAAMD,K;;KAAAA,K;AA4DN,eAAeA,KAAf","sourcesContent":["import React, { useEffect, useState } from \"react\";\n\n// import Wallet from \"../solanaWallet/wallet\"\n  declare const window: any;\n\nconst Index = () => {\n\n  let [cnxnStatus , setCnxnStatus] = useState (window.solana.isConnected ? \"Disconnect\" : \"Connect\");\n  let [pubkey , setPubkey] = useState (window.solana.publicKey?.toString());\n  const isPhantomInstalled = window.solana && window.solana.isPhantom;\nconsole.log();\n\n  // const getProvider = () => {\n  //   if (\"solana\" in window) {\n  //     const provider = window.solana;\n  //     if (provider.isPhantom) {\n  //       return provider;\n  //     }\n  //   }\n  //   window.open(\"https://phantom.app/\", \"_blank\");\n  // };\n\n  const connectAction = () => {\n    if(!window.solana.isConnected) {\n      window.solana.connect().then(()=>{\n        console.log(window.solana.publicKey?.toString());\n        setCnxnStatus('Disconnect');\n        setPubkey(window.solana.publicKey?.toString())\n      });\n    }\n    else (\n      window.solana.disconnect().then(()=>{\n        // console.log(window.solana.publicKey?.toString());\n        setCnxnStatus('Connect');\n\n      })\n    )\n    \n\n\n  }\n\n  useEffect(() => {\n    // if (isPhantomInstalled)\n    // Will either automatically connect to Phantom, or do nothing.\n    // window.solana.connect();\n    setPubkey(window.solana.publicKey?.toString())\n\n  }, []);\n\n  \n    return (\n    <div>\n      <h3>user panel</h3>\n      <div>\n        <h2>{pubkey}</h2>\n        <button onClick={()=>{connectAction()}} > \n        \n          {cnxnStatus}\n        </button>\n      </div>\n      {/* <Wallet></Wallet> */}\n    </div>\n  )\n};\nexport default Index\n\n"]},"metadata":{},"sourceType":"module"}