{"ast":null,"code":"var _jsxFileName = \"/home/ubuntu/MERN-boilerPlate/client/src/component/user/index.tsx\",\n    _s = $RefreshSig$();\n\nimport { clusterApiUrl, Connection } from \"@solana/web3.js\";\nimport * as web3 from \"@solana/web3.js\";\nimport React, { useEffect, useState } from \"react\";\nimport * as api from \"../../action/mintTokenAction\";\nimport * as splToken from \"@solana/spl-token\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Index = () => {\n  _s();\n\n  let [cnxnStatus, setCnxnStatus] = useState(window.solana.isConnected ? \"Disconnect\" : \"Connect\");\n  let [pubkey, setPubkey] = useState('no pk');\n  let [mintPK, setMintPK] = useState('');\n  let [myMintPK, setMyMintPK] = useState(''); // const getProvider = () => {\n  //   if (\"solana\" in window) {\n  //     const provider = window.solana;\n  //     if (provider.isPhantom) {\n  //       return provider;\n  //     }\n  //   }\n  //   window.open(\"https://phantom.app/\", \"_blank\");\n  // };\n\n  const connectAction = async () => {\n    console.log(window.solana.isConnected);\n\n    if (!window.solana.isConnected) {\n      await window.solana.connect();\n      setCnxnStatus('Disconnect');\n      console.log('connected');\n    } else {\n      await window.solana.disconnect();\n      setCnxnStatus('Connect');\n      setPubkey('deleted');\n    }\n  };\n\n  const createWallet = async () => {\n    api.createWallet().then(res => {\n      console.log('wallet', res.data.wallet);\n    });\n  };\n\n  const createNFTByMyContract = async () => {\n    var _window$solana$public;\n\n    var connection = new Connection(clusterApiUrl('devnet'), 'confirmed');\n    let data = {\n      'walletPK': (_window$solana$public = window.solana.publicKey) === null || _window$solana$public === void 0 ? void 0 : _window$solana$public.toString() // 'transaction' : signedTransaction ,\n      // 'signature': signature\n\n    };\n    console.log('data', data);\n    const mintAccount = web3.Keypair.generate();\n    const balanceNeeded = await splToken.Token.getMinBalanceRentForExemptMint(connection); // const transaction = new web3.Transaction();\n\n    const transaction2 = new web3.Transaction(); // let myToken = new splToken.Token(\n    //   connection ,\n    //   mintAccount.publicKey,\n    //   myProgramId,\n    //   marketplaceWallet\n    // )\n    // console.log('splToken.MintLayout',splToken.MintLayout);\n    // transaction2.add(\n    //   web3.SystemProgram.createAccount({\n    //     fromPubkey: window.solana.publicKey,\n    //     newAccountPubkey: mintAccount.publicKey,\n    //     lamports: balanceNeeded,\n    //     space: splToken.MintLayout.span,\n    //     programId: splToken.TOKEN_PROGRAM_ID,\n    //   }),\n    // );\n\n    transaction2.add(splToken.Token.createInitMintInstruction(splToken.ASSOCIATED_TOKEN_PROGRAM_ID, mintAccount.publicKey, 0, window.solana.publicKey, null));\n    let to = new web3.PublicKey('5R7BnfH2kuvxU4WRhog4vBmCABXQB9Y1hkHu8hqh3MyF'); // transaction.add(\n    //   web3.SystemProgram.transfer({\n    //   fromPubkey: window.solana.publicKey,\n    //   toPubkey: to,\n    //   lamports: 100\n    // })\n    // );\n\n    transaction2.feePayer = window.solana.publicKey;\n    transaction2.recentBlockhash = (await connection.getRecentBlockhash()).blockhash;\n    transaction2.sign(mintAccount);\n    console.log('transaction', transaction2);\n    const signedTransaction = await window.solana.signTransaction(transaction2);\n    const signature = await connection.sendRawTransaction(signedTransaction.serialize());\n    console.log('signedTransactions', signedTransaction);\n    console.log('signature', signature);\n    api.mintMyNFT(data).then(async res => {\n      // console.log('token', parse(res.data.token));\n      console.log('res', res.data.transaction);\n      let transaction = res.data.transaction;\n      console.log('transaction', transaction);\n    }); // let transaction = new web3.Transaction();\n    // tran.instructions.forEach(ins =>{\n    //   transaction.add(ins);\n    // });\n\n    /*\n    \n        // transaction.add(res.data.transaction.instructions[0])\n        transaction.feePayer = window.solana.publicKey;\n        transaction.recentBlockhash = (\n          await connection.getRecentBlockhash()\n        ).blockhash;\n    \n          console.log('transaction', transaction);\n    \n          // const signedTransaction = await window.solana.signTransaction(transaction);\n          // const signature = await connection.sendRawTransaction(signedTransaction.serialize());\n          // console.log('signedTransaction', signedTransaction);\n          // console.log('signature', signature);\n    \n          // setMintPK(JSON.stringify(signature));\n          setMintPK(res.data.token);\n        });\n        */\n  };\n\n  const createNFT = async () => {\n    var _window$solana$public2;\n\n    var connection = new Connection(clusterApiUrl('devnet'), 'confirmed');\n    let data = {\n      'walletPK': (_window$solana$public2 = window.solana.publicKey) === null || _window$solana$public2 === void 0 ? void 0 : _window$solana$public2.toString() // 'transaction' : signedTransaction ,\n      // 'signature': signature\n\n    };\n    console.log('data', data);\n    api.mintNFT(data).then(async res => {\n      // console.log('token', parse(res.data.token));\n      console.log('res', res.data); // const transaction = new web3.Transaction();\n      // transaction.add(res.data.transaction.instructions[0])\n      // transaction.feePayer = window.solana.publicKey;\n      // transaction.recentBlockhash = (\n      //   await connection.getRecentBlockhash()\n      // ).blockhash;\n      //   const signedTransaction = await window.solana.signTransaction(transaction);\n      //   const signature = await connection.sendRawTransaction(signedTransaction.serialize());\n      //   console.log('signedTransaction', signedTransaction);\n\n      console.log('tokenPK', res.data.token); // setMintPK(JSON.stringify(signature));\n\n      setMintPK(res.data.token);\n    });\n  };\n\n  useEffect(() => {\n    var _window$solana$public5;\n\n    setTimeout(() => {\n      var _window$solana$public3, _window$solana$public4;\n\n      setPubkey((_window$solana$public3 = window.solana.publicKey) === null || _window$solana$public3 === void 0 ? void 0 : _window$solana$public3.toString());\n      console.log((_window$solana$public4 = window.solana.publicKey) === null || _window$solana$public4 === void 0 ? void 0 : _window$solana$public4.toString());\n    }, 10000);\n    setPubkey((_window$solana$public5 = window.solana.publicKey) === null || _window$solana$public5 === void 0 ? void 0 : _window$solana$public5.toString()); // console.log('setPubkey',pubkey);\n  }, [window.solana.publicKey]); // useEffect(() => {\n  //   setPubkey(window.solana.publicKey?.toString())\n  // }, [window.solana.isConnected]);\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n      children: \"user panel\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 238,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: [\"walletPK : \", pubkey]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 240,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => {\n          connectAction();\n        },\n        children: cnxnStatus\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 241,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 239,\n      columnNumber: 7\n    }, this), window.solana.publicKey && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => {\n          createNFT();\n        },\n        children: \"Create NFT\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 249,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => {\n          createNFTByMyContract();\n        },\n        children: \"Create My NFT\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 254,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 259,\n        columnNumber: 11\n      }, this), mintPK]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 247,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 237,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Index, \"ntEhL3wGt2q4L3WfWcTY/Ozi7OQ=\");\n\n_c = Index;\nexport default Index;\n\nvar _c;\n\n$RefreshReg$(_c, \"Index\");","map":{"version":3,"sources":["/home/ubuntu/MERN-boilerPlate/client/src/component/user/index.tsx"],"names":["clusterApiUrl","Connection","web3","React","useEffect","useState","api","splToken","Index","cnxnStatus","setCnxnStatus","window","solana","isConnected","pubkey","setPubkey","mintPK","setMintPK","myMintPK","setMyMintPK","connectAction","console","log","connect","disconnect","createWallet","then","res","data","wallet","createNFTByMyContract","connection","publicKey","toString","mintAccount","Keypair","generate","balanceNeeded","Token","getMinBalanceRentForExemptMint","transaction2","Transaction","add","createInitMintInstruction","ASSOCIATED_TOKEN_PROGRAM_ID","to","PublicKey","feePayer","recentBlockhash","getRecentBlockhash","blockhash","sign","signedTransaction","signTransaction","signature","sendRawTransaction","serialize","mintMyNFT","transaction","createNFT","mintNFT","token","setTimeout"],"mappings":"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","sourcesContent":["import { clusterApiUrl, Connection, Transaction , PublicKey} from \"@solana/web3.js\";\nimport * as web3 from \"@solana/web3.js\";\nimport React, { useEffect, useLayoutEffect, useState } from \"react\";\nimport * as api from \"../../action/mintTokenAction\"\nimport { pickBy } from \"lodash\";\nimport * as splToken from \"@solana/spl-token\";\n\nimport {parse, stringify, toJSON, fromJSON} from 'flatted';\n// import Wallet from \"../solanaWallet/wallet\"\ndeclare const window: any;\n\nconst Index = () => {\n\n  let [cnxnStatus, setCnxnStatus] = useState(window.solana.isConnected ? \"Disconnect\" : \"Connect\");\n  let [pubkey, setPubkey] = useState('no pk');\n  let [mintPK, setMintPK] = useState('');\n  let [myMintPK, setMyMintPK] = useState('');\n\n  // const getProvider = () => {\n  //   if (\"solana\" in window) {\n  //     const provider = window.solana;\n  //     if (provider.isPhantom) {\n  //       return provider;\n  //     }\n  //   }\n  //   window.open(\"https://phantom.app/\", \"_blank\");\n  // };\n\n  const connectAction = async () => {\n    console.log(window.solana.isConnected);\n\n    if (!window.solana.isConnected) {\n      await window.solana.connect();\n      setCnxnStatus('Disconnect');\n      console.log('connected');\n      \n\n    }\n    else {\n      await window.solana.disconnect();\n      setCnxnStatus('Connect');\n      setPubkey('deleted');\n      \n\n    }\n  }\n\n  const createWallet = async () => {\n    api.createWallet().then(res => {\n      console.log('wallet', res.data.wallet);\n    });\n  }\n\n  const createNFTByMyContract = async () => {\n\n    var connection = new Connection(\n      clusterApiUrl('devnet'),\n      'confirmed',\n    );\n\n    \n\n    let data = {\n      'walletPK': window.solana.publicKey?.toString(),\n      // 'transaction' : signedTransaction ,\n      // 'signature': signature\n    };\n    console.log('data', data);\n\n\n    const mintAccount = web3.Keypair.generate();\n\n    const balanceNeeded = await splToken.Token.getMinBalanceRentForExemptMint(\n      connection,\n    );\n  \n    // const transaction = new web3.Transaction();\n    const transaction2 = new web3.Transaction();\n\n  // let myToken = new splToken.Token(\n  //   connection ,\n  //   mintAccount.publicKey,\n  //   myProgramId,\n  //   marketplaceWallet\n  // )\n\n// console.log('splToken.MintLayout',splToken.MintLayout);\n\n  // transaction2.add(\n  //   web3.SystemProgram.createAccount({\n  //     fromPubkey: window.solana.publicKey,\n  //     newAccountPubkey: mintAccount.publicKey,\n  //     lamports: balanceNeeded,\n  //     space: splToken.MintLayout.span,\n  //     programId: splToken.TOKEN_PROGRAM_ID,\n  //   }),\n  // );\n    transaction2.add(\n      splToken.Token.createInitMintInstruction(\n        splToken.ASSOCIATED_TOKEN_PROGRAM_ID,\n        mintAccount.publicKey,\n        0,\n        window.solana.publicKey,\n        null,\n      ),\n    );\n\n\nlet to = new web3.PublicKey('5R7BnfH2kuvxU4WRhog4vBmCABXQB9Y1hkHu8hqh3MyF');\n  // transaction.add(\n  //   web3.SystemProgram.transfer({\n  //   fromPubkey: window.solana.publicKey,\n  //   toPubkey: to,\n  //   lamports: 100\n  // })\n  // );\n\n    transaction2.feePayer = window.solana.publicKey;\n    transaction2.recentBlockhash = (\n      await connection.getRecentBlockhash()\n    ).blockhash;\n\n\n\n    transaction2.sign(mintAccount);\n\n    console.log('transaction', transaction2);\n\n    \n    const signedTransaction  = await window.solana.signTransaction(transaction2);\n    \n      const signature = await connection.sendRawTransaction(signedTransaction.serialize());\n      console.log('signedTransactions', signedTransaction);\n      console.log('signature', signature);\n    \n\n\n    api.mintMyNFT(data).then(async res => {\n      // console.log('token', parse(res.data.token));\n      console.log('res', res.data.transaction);\n      let transaction = res.data.transaction as Transaction;\n    console.log('transaction', transaction);\n    });\n// let transaction = new web3.Transaction();\n// tran.instructions.forEach(ins =>{\n//   transaction.add(ins);\n// });\n/*\n\n    // transaction.add(res.data.transaction.instructions[0])\n    transaction.feePayer = window.solana.publicKey;\n    transaction.recentBlockhash = (\n      await connection.getRecentBlockhash()\n    ).blockhash;\n\n      console.log('transaction', transaction);\n\n      // const signedTransaction = await window.solana.signTransaction(transaction);\n      // const signature = await connection.sendRawTransaction(signedTransaction.serialize());\n      // console.log('signedTransaction', signedTransaction);\n      // console.log('signature', signature);\n\n      // setMintPK(JSON.stringify(signature));\n      setMintPK(res.data.token);\n    });\n    */\n\n  }\n\n\n  const createNFT = async () => {\n\n    var connection = new Connection(\n      clusterApiUrl('devnet'),\n      'confirmed',\n    );\n\n\n\n    let data = {\n      'walletPK': window.solana.publicKey?.toString(),\n      // 'transaction' : signedTransaction ,\n      // 'signature': signature\n    };\n    console.log('data', data);\n\n    \n\n\n    api.mintNFT(data).then(async res => {\n      // console.log('token', parse(res.data.token));\n      console.log('res', res.data);\n\n    // const transaction = new web3.Transaction();\n    // transaction.add(res.data.transaction.instructions[0])\n    // transaction.feePayer = window.solana.publicKey;\n    // transaction.recentBlockhash = (\n    //   await connection.getRecentBlockhash()\n    // ).blockhash;\n    //   const signedTransaction = await window.solana.signTransaction(transaction);\n    //   const signature = await connection.sendRawTransaction(signedTransaction.serialize());\n    //   console.log('signedTransaction', signedTransaction);\n      console.log('tokenPK', res.data.token);\n\n      // setMintPK(JSON.stringify(signature));\n      setMintPK(res.data.token);\n    });\n    \n\n  }\n\n\n\n  useEffect(() => {\n    setTimeout(() => {\n      setPubkey(window.solana.publicKey?.toString());\n      console.log(window.solana.publicKey?.toString());\n\n    }, 10000)\n    setPubkey(window.solana.publicKey?.toString());\n\n    \n    // console.log('setPubkey',pubkey);\n    \n\n  }, [window.solana.publicKey])\n\n\n  // useEffect(() => {\n\n  //   setPubkey(window.solana.publicKey?.toString())\n\n  // }, [window.solana.isConnected]);\n\n\n  return (\n    <div>\n      <h3>user panel</h3>\n      <div>\n        <h2>walletPK : {pubkey}</h2>\n        <button onClick={() => { connectAction() }} >\n\n          {cnxnStatus}\n        </button>\n      </div>\n      {window.solana.publicKey && (\n        <div>\n\n          <button onClick={() => { createNFT() }} >\n\n            Create NFT\n          </button>\n\n          <button onClick={() => { createNFTByMyContract() }} >\n\n            Create My NFT\n          </button>\n\n          <br></br>\n          {mintPK}\n        </div>)}\n      {/* <Wallet></Wallet> */}\n    </div>\n  )\n};\nexport default Index\n\n"]},"metadata":{},"sourceType":"module"}