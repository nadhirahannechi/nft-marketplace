{"ast":null,"code":"var _jsxFileName = \"/home/ubuntu/MERN-boilerPlate/client/src/component/user/index.tsx\",\n    _s = $RefreshSig$();\n\nimport { clusterApiUrl, Connection } from \"@solana/web3.js\";\nimport * as web3 from \"@solana/web3.js\";\nimport React, { useEffect, useState } from \"react\";\nimport * as api from \"../../action/mintTokenAction\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Index = () => {\n  _s();\n\n  let [cnxnStatus, setCnxnStatus] = useState(window.solana.isConnected ? \"Disconnect\" : \"Connect\");\n  let [pubkey, setPubkey] = useState('no pk');\n  let [mintPK, setMintPK] = useState(''); // const getProvider = () => {\n  //   if (\"solana\" in window) {\n  //     const provider = window.solana;\n  //     if (provider.isPhantom) {\n  //       return provider;\n  //     }\n  //   }\n  //   window.open(\"https://phantom.app/\", \"_blank\");\n  // };\n\n  const connectAction = async () => {\n    console.log(window.solana.isConnected);\n\n    if (!window.solana.isConnected) {\n      await window.solana.connect();\n      setCnxnStatus('Disconnect');\n      console.log('connected');\n    } else {\n      await window.solana.disconnect();\n      setCnxnStatus('Connect');\n      setPubkey('deleted');\n    }\n  };\n\n  const createWallet = async () => {\n    api.createWallet().then(res => {\n      console.log('wallet', res.data.wallet);\n    });\n  };\n\n  const createNFT = async () => {\n    var _window$solana$public;\n\n    var connection = new Connection(clusterApiUrl('devnet'), 'confirmed'); //   const transaction = new Transaction();\n    //   const signedTransaction = await window.solana.signTransaction(transaction);\n    // const signature = await connection.sendRawTransaction(signedTransaction.serialize());\n\n    let data = {\n      'walletPK': (_window$solana$public = window.solana.publicKey) === null || _window$solana$public === void 0 ? void 0 : _window$solana$public.toString() // 'transaction' : signedTransaction ,\n      // 'signature': signature\n\n    };\n    console.log('data', data); // const transaction = new web3.Transaction();\n    // const signedTransaction = await window.solana.signTransaction(transaction);\n    // const signature = await connection.sendRawTransaction(signedTransaction.serialize());\n    //       console.log('signedTransactions', signedTransaction);\n    //   console.log('signature', signature);\n\n    /*\n    \n        const mintAccount = web3.Keypair.generate();\n    \n        const balanceNeeded = await splToken.Token.getMinBalanceRentForExemptMint(\n          connection,\n        );\n      \n        const transaction = new web3.Transaction();\n    \n    console.log('splToken.MintLayout',splToken.MintLayout);\n    \n      transaction.add(\n        web3.SystemProgram.createAccount({\n          fromPubkey: window.solana.publicKey,\n          newAccountPubkey: mintAccount.publicKey,\n          lamports: balanceNeeded,\n          space: splToken.MintLayout.span,\n          programId: splToken.ASSOCIATED_TOKEN_PROGRAM_ID,\n        }),\n      );\n      //   transaction.add(\n      //     splToken.Token.createInitMintInstruction(\n      //       splToken.ASSOCIATED_TOKEN_PROGRAM_ID,\n      //       mintAccount.publicKey,\n      //       0,\n      //       window.solana.publicKey,\n      //       window.solana.publicKey,\n      //     ),\n      //   );\n    \n    \n    // let to = new web3.PublicKey('5R7BnfH2kuvxU4WRhog4vBmCABXQB9Y1hkHu8hqh3MyF');\n    //   transaction.add(\n    //     web3.SystemProgram.transfer({\n    //     fromPubkey: window.solana.publicKey,\n    //     toPubkey: to,\n    //     lamports: 100\n    //   })\n    //   );\n    \n        transaction.feePayer = window.solana.publicKey;\n        transaction.recentBlockhash = (\n          await connection.getRecentBlockhash()\n        ).blockhash;\n    \n        const signedTransaction = await window.solana.signTransaction(transaction);\n          const signature = await connection.sendRawTransaction(signedTransaction.serialize());\n          console.log('signedTransactions', signedTransaction);\n          console.log('signature', signature);\n        \n    */\n\n    api.mintNFT(data).then(async res => {\n      console.log('res', res.data.transaction);\n      const transaction = new web3.Transaction();\n      transaction.add(res.data.transaction.instructions[0]);\n      transaction.feePayer = window.solana.publicKey;\n      transaction.recentBlockhash = (await connection.getRecentBlockhash()).blockhash;\n      const signedTransaction = await window.solana.signTransaction(transaction);\n      const signature = await connection.sendRawTransaction(signedTransaction.serialize());\n      console.log('signedTransaction', signedTransaction);\n      console.log('signature', signature); // setMintPK(JSON.stringify(signature));\n\n      setMintPK(signature);\n    });\n  };\n\n  useEffect(() => {\n    var _window$solana$public4;\n\n    setTimeout(() => {\n      var _window$solana$public2, _window$solana$public3;\n\n      setPubkey((_window$solana$public2 = window.solana.publicKey) === null || _window$solana$public2 === void 0 ? void 0 : _window$solana$public2.toString());\n      console.log((_window$solana$public3 = window.solana.publicKey) === null || _window$solana$public3 === void 0 ? void 0 : _window$solana$public3.toString());\n    }, 10000);\n    setPubkey((_window$solana$public4 = window.solana.publicKey) === null || _window$solana$public4 === void 0 ? void 0 : _window$solana$public4.toString()); // console.log('setPubkey',pubkey);\n  }, [window.solana.publicKey]); // useEffect(() => {\n  //   setPubkey(window.solana.publicKey?.toString())\n  // }, [window.solana.isConnected]);\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n      children: \"user panel\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 172,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: [\"walletPK : \", pubkey]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 174,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => {\n          connectAction();\n        },\n        children: cnxnStatus\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 175,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 173,\n      columnNumber: 7\n    }, this), window.solana.publicKey && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => {\n          createNFT();\n        },\n        children: \"Create NFT\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 183,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 187,\n        columnNumber: 11\n      }, this), mintPK]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 181,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 171,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Index, \"biZi/jge7fwVdmcTZthahoXty7M=\");\n\n_c = Index;\nexport default Index;\n\nvar _c;\n\n$RefreshReg$(_c, \"Index\");","map":{"version":3,"sources":["/home/ubuntu/MERN-boilerPlate/client/src/component/user/index.tsx"],"names":["clusterApiUrl","Connection","web3","React","useEffect","useState","api","Index","cnxnStatus","setCnxnStatus","window","solana","isConnected","pubkey","setPubkey","mintPK","setMintPK","connectAction","console","log","connect","disconnect","createWallet","then","res","data","wallet","createNFT","connection","publicKey","toString","mintNFT","transaction","Transaction","add","instructions","feePayer","recentBlockhash","getRecentBlockhash","blockhash","signedTransaction","signTransaction","signature","sendRawTransaction","serialize","setTimeout"],"mappings":"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","sourcesContent":["import { clusterApiUrl, Connection, Transaction , PublicKey} from \"@solana/web3.js\";\nimport * as web3 from \"@solana/web3.js\";\nimport React, { useEffect, useState } from \"react\";\nimport * as api from \"../../action/mintTokenAction\"\nimport { pickBy } from \"lodash\";\nimport * as splToken from \"@solana/spl-token\";\n// import Wallet from \"../solanaWallet/wallet\"\ndeclare const window: any;\n\nconst Index = () => {\n\n  let [cnxnStatus, setCnxnStatus] = useState(window.solana.isConnected ? \"Disconnect\" : \"Connect\");\n  let [pubkey, setPubkey] = useState('no pk');\n  let [mintPK, setMintPK] = useState('');\n\n  // const getProvider = () => {\n  //   if (\"solana\" in window) {\n  //     const provider = window.solana;\n  //     if (provider.isPhantom) {\n  //       return provider;\n  //     }\n  //   }\n  //   window.open(\"https://phantom.app/\", \"_blank\");\n  // };\n\n  const connectAction = async () => {\n    console.log(window.solana.isConnected);\n\n    if (!window.solana.isConnected) {\n      await window.solana.connect();\n      setCnxnStatus('Disconnect');\n      console.log('connected');\n      \n\n    }\n    else {\n      await window.solana.disconnect();\n      setCnxnStatus('Connect');\n      setPubkey('deleted');\n      \n\n    }\n  }\n\n  const createWallet = async () => {\n    api.createWallet().then(res => {\n      console.log('wallet', res.data.wallet);\n    });\n  }\n\n  const createNFT = async () => {\n\n    var connection = new Connection(\n      clusterApiUrl('devnet'),\n      'confirmed',\n    );\n\n    //   const transaction = new Transaction();\n    //   const signedTransaction = await window.solana.signTransaction(transaction);\n    // const signature = await connection.sendRawTransaction(signedTransaction.serialize());\n\n    let data = {\n      'walletPK': window.solana.publicKey?.toString(),\n      // 'transaction' : signedTransaction ,\n      // 'signature': signature\n    };\n    console.log('data', data);\n\n    // const transaction = new web3.Transaction();\n    // const signedTransaction = await window.solana.signTransaction(transaction);\n    // const signature = await connection.sendRawTransaction(signedTransaction.serialize());\n    //       console.log('signedTransactions', signedTransaction);\n    //   console.log('signature', signature);\n\n\n/*\n\n    const mintAccount = web3.Keypair.generate();\n\n    const balanceNeeded = await splToken.Token.getMinBalanceRentForExemptMint(\n      connection,\n    );\n  \n    const transaction = new web3.Transaction();\n\nconsole.log('splToken.MintLayout',splToken.MintLayout);\n\n  transaction.add(\n    web3.SystemProgram.createAccount({\n      fromPubkey: window.solana.publicKey,\n      newAccountPubkey: mintAccount.publicKey,\n      lamports: balanceNeeded,\n      space: splToken.MintLayout.span,\n      programId: splToken.ASSOCIATED_TOKEN_PROGRAM_ID,\n    }),\n  );\n  //   transaction.add(\n  //     splToken.Token.createInitMintInstruction(\n  //       splToken.ASSOCIATED_TOKEN_PROGRAM_ID,\n  //       mintAccount.publicKey,\n  //       0,\n  //       window.solana.publicKey,\n  //       window.solana.publicKey,\n  //     ),\n  //   );\n\n\n// let to = new web3.PublicKey('5R7BnfH2kuvxU4WRhog4vBmCABXQB9Y1hkHu8hqh3MyF');\n//   transaction.add(\n//     web3.SystemProgram.transfer({\n//     fromPubkey: window.solana.publicKey,\n//     toPubkey: to,\n//     lamports: 100\n//   })\n//   );\n\n    transaction.feePayer = window.solana.publicKey;\n    transaction.recentBlockhash = (\n      await connection.getRecentBlockhash()\n    ).blockhash;\n\n    const signedTransaction = await window.solana.signTransaction(transaction);\n      const signature = await connection.sendRawTransaction(signedTransaction.serialize());\n      console.log('signedTransactions', signedTransaction);\n      console.log('signature', signature);\n    \n*/\n\n    api.mintNFT(data).then(async res => {\n      console.log('res', res.data.transaction);\n    const transaction = new web3.Transaction();\n    transaction.add(res.data.transaction.instructions[0])\n    transaction.feePayer = window.solana.publicKey;\n    transaction.recentBlockhash = (\n      await connection.getRecentBlockhash()\n    ).blockhash;\n      const signedTransaction = await window.solana.signTransaction(transaction);\n      const signature = await connection.sendRawTransaction(signedTransaction.serialize());\n      console.log('signedTransaction', signedTransaction);\n      console.log('signature', signature);\n\n      // setMintPK(JSON.stringify(signature));\n      setMintPK(signature);\n    });\n    \n\n  }\n\n\n  useEffect(() => {\n    setTimeout(() => {\n      setPubkey(window.solana.publicKey?.toString());\n      console.log(window.solana.publicKey?.toString());\n\n    }, 10000)\n    setPubkey(window.solana.publicKey?.toString());\n    // console.log('setPubkey',pubkey);\n    \n\n  }, [window.solana.publicKey])\n\n\n  // useEffect(() => {\n\n  //   setPubkey(window.solana.publicKey?.toString())\n\n  // }, [window.solana.isConnected]);\n\n\n  return (\n    <div>\n      <h3>user panel</h3>\n      <div>\n        <h2>walletPK : {pubkey}</h2>\n        <button onClick={() => { connectAction() }} >\n\n          {cnxnStatus}\n        </button>\n      </div>\n      {window.solana.publicKey && (\n        <div>\n\n          <button onClick={() => { createNFT() }} >\n\n            Create NFT\n          </button>\n          <br></br>\n          {mintPK}\n        </div>)}\n      {/* <Wallet></Wallet> */}\n    </div>\n  )\n};\nexport default Index\n\n"]},"metadata":{},"sourceType":"module"}