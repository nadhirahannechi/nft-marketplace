{"ast":null,"code":"var _jsxFileName = \"/home/ubuntu/MERN-boilerPlate/client/src/component/user/index.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from \"react\"; // import Wallet from \"../solanaWallet/wallet\"\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Index = () => {\n  _s();\n\n  let [cnxnStatus, setCnxnStatus] = useState(window.solana.isConnected ? \"Disconnect\" : \"Connect\");\n  let [pubkey, setPubkey] = useState('no pk'); // const getProvider = () => {\n  //   if (\"solana\" in window) {\n  //     const provider = window.solana;\n  //     if (provider.isPhantom) {\n  //       return provider;\n  //     }\n  //   }\n  //   window.open(\"https://phantom.app/\", \"_blank\");\n  // };\n\n  const connectAction = async () => {\n    console.log(window.solana.isConnected);\n\n    if (!window.solana.isConnected) {\n      await window.solana.connect().then().then(() => {\n        console.log(window.solana.isConnected);\n      });\n      setCnxnStatus('Disconnect'); // setPubkey(window.solana.publicKey?.toString());\n    } else {\n      await window.solana.disconnect(); // console.log(window.solana.publicKey?.toString());\n\n      setCnxnStatus('Connect'); // setPubkey('no pubkey')\n    }\n  };\n\n  useEffect(() => {\n    setTimeout(() => {\n      var _window$solana$public, _window$solana$public2;\n\n      setPubkey((_window$solana$public = window.solana.publicKey) === null || _window$solana$public === void 0 ? void 0 : _window$solana$public.toString());\n      console.log((_window$solana$public2 = window.solana.publicKey) === null || _window$solana$public2 === void 0 ? void 0 : _window$solana$public2.toString());\n    }, 10000);\n  }, [pubkey]); // useEffect(() => {\n  //   setPubkey(window.solana.publicKey?.toString())\n  // }, [window.solana.isConnected]);\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n      children: \"user panel\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: pubkey\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => {\n          connectAction();\n        },\n        children: cnxnStatus\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 9\n      }, this), pubkey != 'no pk' && /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => {\n          connectAction();\n        },\n        children: cnxnStatus\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 30\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 60,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Index, \"sB6Alc83vqf/KhpTxdX4J6b072A=\");\n\n_c = Index;\nexport default Index;\n\nvar _c;\n\n$RefreshReg$(_c, \"Index\");","map":{"version":3,"sources":["/home/ubuntu/MERN-boilerPlate/client/src/component/user/index.tsx"],"names":["React","useEffect","useState","Index","cnxnStatus","setCnxnStatus","window","solana","isConnected","pubkey","setPubkey","connectAction","console","log","connect","then","disconnect","setTimeout","publicKey","toString"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C,C,CAEA;;;;AAGA,MAAMC,KAAK,GAAG,MAAM;AAAA;;AAElB,MAAI,CAACC,UAAD,EAAcC,aAAd,IAA+BH,QAAQ,CAAEI,MAAM,CAACC,MAAP,CAAcC,WAAd,GAA4B,YAA5B,GAA2C,SAA7C,CAA3C;AACA,MAAI,CAACC,MAAD,EAAUC,SAAV,IAAuBR,QAAQ,CAAE,OAAF,CAAnC,CAHkB,CAKlB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,QAAMS,aAAa,GAAG,YAAY;AAChCC,IAAAA,OAAO,CAACC,GAAR,CAAYP,MAAM,CAACC,MAAP,CAAcC,WAA1B;;AAEA,QAAG,CAACF,MAAM,CAACC,MAAP,CAAcC,WAAlB,EAA+B;AAC9B,YAAMF,MAAM,CAACC,MAAP,CAAcO,OAAd,GAAwBC,IAAxB,GAA+BA,IAA/B,CAAoC,MAAI;AAE5CH,QAAAA,OAAO,CAACC,GAAR,CAAYP,MAAM,CAACC,MAAP,CAAcC,WAA1B;AACD,OAHK,CAAN;AAIGH,MAAAA,aAAa,CAAC,YAAD,CAAb,CAL2B,CAM3B;AAEH,KARD,MASK;AACH,YAAMC,MAAM,CAACC,MAAP,CAAcS,UAAd,EAAN,CADG,CAED;;AACAX,MAAAA,aAAa,CAAC,SAAD,CAAb,CAHC,CAID;AAEH;AACF,GAnBD;;AAoBAJ,EAAAA,SAAS,CAAC,MAAM;AACdgB,IAAAA,UAAU,CAAC,MAAM;AAAA;;AACfP,MAAAA,SAAS,0BAACJ,MAAM,CAACC,MAAP,CAAcW,SAAf,0DAAC,sBAAyBC,QAAzB,EAAD,CAAT;AACAP,MAAAA,OAAO,CAACC,GAAR,2BAAYP,MAAM,CAACC,MAAP,CAAcW,SAA1B,2DAAY,uBAAyBC,QAAzB,EAAZ;AAED,KAJS,EAIP,KAJO,CAAV;AAKD,GANQ,EAMN,CAACV,MAAD,CANM,CAAT,CAnCkB,CA8ClB;AAEA;AAEA;;AAGE,sBACA;AAAA,4BACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADF,eAEE;AAAA,8BACE;AAAA,kBAAKA;AAAL;AAAA;AAAA;AAAA;AAAA,cADF,eAEE;AAAQ,QAAA,OAAO,EAAE,MAAI;AAACE,UAAAA,aAAa;AAAG,SAAtC;AAAA,kBAEGP;AAFH;AAAA;AAAA;AAAA;AAAA,cAFF,EAMGK,MAAM,IAAE,OAAR,iBAAoB;AAAQ,QAAA,OAAO,EAAE,MAAI;AAACE,UAAAA,aAAa;AAAG,SAAtC;AAAA,kBAEpBP;AAFoB;AAAA;AAAA;AAAA;AAAA,cANvB;AAAA;AAAA;AAAA;AAAA;AAAA,YAFF;AAAA;AAAA;AAAA;AAAA;AAAA,UADA;AAiBH,CAtED;;GAAMD,K;;KAAAA,K;AAuEN,eAAeA,KAAf","sourcesContent":["import React, { useEffect, useState } from \"react\";\n\n// import Wallet from \"../solanaWallet/wallet\"\n  declare const window: any;\n\nconst Index = () => {\n\n  let [cnxnStatus , setCnxnStatus] = useState (window.solana.isConnected ? \"Disconnect\" : \"Connect\");\n  let [pubkey , setPubkey] = useState ('no pk');\n\n  // const getProvider = () => {\n  //   if (\"solana\" in window) {\n  //     const provider = window.solana;\n  //     if (provider.isPhantom) {\n  //       return provider;\n  //     }\n  //   }\n  //   window.open(\"https://phantom.app/\", \"_blank\");\n  // };\n\n  const connectAction = async () => {\n    console.log(window.solana.isConnected);\n\n    if(!window.solana.isConnected) {\n     await window.solana.connect().then().then(()=>{\n\n       console.log(window.solana.isConnected);\n     });\n        setCnxnStatus('Disconnect');\n        // setPubkey(window.solana.publicKey?.toString());\n      \n    }\n    else { \n      await window.solana.disconnect();\n        // console.log(window.solana.publicKey?.toString());\n        setCnxnStatus('Connect');\n        // setPubkey('no pubkey')\n\n    }\n  }\n  useEffect(() => {\n    setTimeout(() => {\n      setPubkey(window.solana.publicKey?.toString());\n      console.log(window.solana.publicKey?.toString());\n\n    }, 10000)\n  }, [pubkey])\n\n\n  \n\n  // useEffect(() => {\n\n  //   setPubkey(window.solana.publicKey?.toString())\n\n  // }, [window.solana.isConnected]);\n\n  \n    return (\n    <div>\n      <h3>user panel</h3>\n      <div>\n        <h2>{pubkey}</h2>\n        <button onClick={()=>{connectAction()}} > \n        \n          {cnxnStatus}\n        </button>\n        {pubkey!='no pk' && (<button onClick={()=>{connectAction()}} > \n        \n        {cnxnStatus}\n      </button>)}\n      </div>\n      {/* <Wallet></Wallet> */}\n    </div>\n  )\n};\nexport default Index\n\n"]},"metadata":{},"sourceType":"module"}