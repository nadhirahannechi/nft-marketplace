{"ast":null,"code":"// import { WalletAdapter } from \"@solana/wallet-base\";\n// import Wallet from \"@project-serum/sol-wallet-adapter\";\n// import { Button } from \"antd\";\n// import React, { useCallback, useContext, useEffect, useMemo, useState } from \"react\";\n// // import { notify } from \"./../utils/notifications\";\n// import { useConnectionConfig } from \"./connection\";\n// import { useLocalStorageState } from \"../utils/utils\";\n// import { PhantomWalletAdapter } from \"../wallet-adapters/phantom\";\n// import { useLocation } from \"react-router\";\n// import { MetaplexModal } from \"../components/MetaplexModal\";\n// import './wallet.css'\n// import { TorusWalletAdapter } from \"../wallet-adapters/torus\";\n// const ASSETS_URL = 'https://raw.githubusercontent.com/solana-labs/oyster/main/assets/wallets/';\n// export const WALLET_PROVIDERS = [\n//   {\n//     name: \"Phantom\",\n//     url: \"https://www.phantom.app\",\n//     icon: `https://www.phantom.app/img/logo.png`,\n//     adapter: PhantomWalletAdapter,\n//   },\n//   {\n//     name: \"Sollet\",\n//     url: \"https://www.sollet.io\",\n//     icon: `${ASSETS_URL}sollet.svg`,\n//   },\n//   {\n//     name: \"MathWallet\",\n//     url: \"https://mathwallet.org\",\n//     icon: `${ASSETS_URL}mathwallet.svg`,\n//   },\n//   {\n//     name: 'Torus',\n//     url: 'https://tor.us',\n//     icon: `${ASSETS_URL}torus.svg`,\n//     adapter: TorusWalletAdapter,\n//   }\n// ];\n// const WalletContext = React.createContext<{\n//   wallet: WalletAdapter | undefined,\n//   connected: boolean,\n//   select: () => void,\n//   provider: typeof WALLET_PROVIDERS[number] | undefined,\n// }>({\n//   wallet: undefined,\n//   connected: false,\n//   select() { },\n//   provider: undefined,\n// });\n// export function WalletProvider({ children = null as any }) {\n//   const { endpoint } = useConnectionConfig();\n//   const location = useLocation();\n//   const [autoConnect, setAutoConnect] = useState(location.pathname.indexOf('result=') >= 0 || false);\n//   const [providerUrl, setProviderUrl] = useLocalStorageState(\"walletProvider\");\n//   const provider = useMemo(() => WALLET_PROVIDERS.find(({ url }) => url === providerUrl), [providerUrl]);\n//   const wallet = useMemo(function () {\n//     if (provider) {\n//       return new (provider.adapter || Wallet)(providerUrl, endpoint) as WalletAdapter;\n//     }\n//   }, [provider, providerUrl, endpoint]);\n//   const [connected, setConnected] = useState(false);\n//   useEffect(() => {\n//     if (wallet?.publicKey && connected) {\n//       const walletPublicKey = wallet.publicKey.toBase58();\n//       const keyToDisplay =\n//         walletPublicKey.length > 20\n//           ? `${walletPublicKey.substring(0, 7)}.....${walletPublicKey.substring(\n//             walletPublicKey.length - 7,\n//             walletPublicKey.length\n//           )}`\n//           : walletPublicKey;\n//       // notify({\n//       //   message: \"Wallet update\",\n//       //   description: \"Connected to wallet \" + keyToDisplay,\n//       // });\n//     }\n//   }, [connected])\n//   useEffect(() => {\n//     if (wallet) {\n//       wallet.on(\"connect\", () => {\n//         if (wallet.publicKey) {\n//           setConnected(true);\n//         }\n//       });\n//       wallet.on(\"disconnect\", () => {\n//         setConnected(false);\n//         // notify({\n//         //   message: \"Wallet update\",\n//         //   description: \"Disconnected from wallet\",\n//         // });\n//       });\n//     }\n//     return () => {\n//       setConnected(false);\n//       if (wallet) {\n//         wallet.disconnect();\n//       }\n//     };\n//   }, [wallet]);\n//   useEffect(() => {\n//     if (wallet && autoConnect) {\n//       wallet.connect();\n//       setAutoConnect(false);\n//     }\n//     return () => { }\n//   }, [wallet, autoConnect]);\n//   const [isModalVisible, setIsModalVisible] = useState(false);\n//   const [showProviders, setShowProviders] = useState(false);\n//   const select = useCallback(() => setIsModalVisible(true), []);\n//   const close = useCallback(() => {\n//     setIsModalVisible(false)\n//     setShowProviders(false)\n//   }, []);\n//   const pp = WALLET_PROVIDERS.find(wp => wp.name === \"Phantom\")\n//   return (\n//     <WalletContext.Provider\n//       value={{\n//         wallet,\n//         connected,\n//         select,\n//         provider,\n//       }}\n//     >\n//       {children}\n//       <MetaplexModal\n//         visible={isModalVisible}\n//         onCancel={close}\n//       >\n//         <div style={{\n//           background: 'linear-gradient(180deg, #D329FC 0%, #8F6DDE 49.48%, #19E6AD 100%)',\n//           borderRadius: 36,\n//           width: 50,\n//           height: 50,\n//           textAlign: 'center',\n//           verticalAlign: 'middle',\n//           fontWeight: 700,\n//           fontSize: '1.3rem',\n//           lineHeight: 2.4,\n//           marginBottom: 10,\n//         }}>M</div>\n//         <h2>{provider ? 'Change provider' : 'Welcome to Metaplex'}</h2>\n//         <p>{provider ? 'Feel free to switch wallet provider' : 'You must be signed in to place a bid'}</p>\n//         <br />\n//         {(provider || showProviders) ? <>\n//           {WALLET_PROVIDERS.map((provider, idx) => {\n//             if (providerUrl === provider.url) return null\n//             const onClick = function () {\n//               setProviderUrl(provider.url);\n//               setAutoConnect(true);\n//               close();\n//             }\n//             return (\n//               <Button\n//                 key={idx}\n//                 size=\"large\"\n//                 type={providerUrl === provider.url ? \"primary\" : \"ghost\"}\n//                 onClick={onClick}\n//                 icon={\n//                   <img\n//                     alt={`${provider.name}`}\n//                     width={20}\n//                     height={20}\n//                     src={provider.icon}\n//                     style={{ marginRight: 8 }} />\n//                 }\n//                 style={{\n//                   display: \"block\",\n//                   width: \"100%\",\n//                   textAlign: \"left\",\n//                   marginBottom: 8,\n//                 }}>{provider.name}</Button>\n//             )\n//           })}\n//         </> : <>\n//           <Button\n//             className=\"metaplex-button\"\n//             style={{\n//               width: '80%',\n//               fontWeight: 'unset',\n//             }}\n//             onClick={_ => {\n//               setProviderUrl(pp?.url);\n//               setAutoConnect(true);\n//               close();\n//             }}\n//           >\n//             <span><img src={pp?.icon} style={{ width: '1.2rem' }} />&nbsp;Sign in with Phantom</span>\n//             <span>&gt;</span>\n//           </Button>\n//           <p onClick={_ => setShowProviders(true)} style={{ cursor: 'pointer', marginTop: 10 }}>\n//             Select a different Solana wallet\n//           </p>\n//         </>}\n//       </MetaplexModal>\n//     </WalletContext.Provider>\n//   );\n// }\n// export const useWallet = () => {\n//   const { wallet, connected, provider, select } = useContext(WalletContext);\n//   return {\n//     wallet,\n//     connected,\n//     provider,\n//     select,\n//     connect() {\n//       wallet ? wallet.connect() : select();\n//     },\n//     disconnect() {\n//       wallet?.disconnect();\n//     },\n//   };\n// }\n////////////////////////////////\nimport Wallet from \"@project-serum/sol-wallet-adapter\";\nimport { Connection, SystemProgram, Transaction, PublicKey } from \"@solana/web3.js\";\nconst cluster = \"http://devnet.solana.com\";\nconst connection = new Connection(cluster, \"confirmed\");\nconst wallet = new Wallet(\"https://www.sollet.io\", cluster);\nexport async function initWallet() {\n  var _wallet$publicKey;\n\n  await wallet.connect();\n  console.log(\"wallet publicKey\", wallet === null || wallet === void 0 ? void 0 : (_wallet$publicKey = wallet.publicKey) === null || _wallet$publicKey === void 0 ? void 0 : _wallet$publicKey.toBase58());\n  return [connection, wallet];\n}\nexport async function sendMoney(destPubkeyStr, lamports = 500 * 1000000) {\n  try {\n    console.log(\"starting sendMoney\");\n    const destPubkey = new PublicKey(destPubkeyStr);\n    const walletAccountInfo = await connection.getAccountInfo(wallet.publicKey);\n    console.log(\"wallet data size\", walletAccountInfo === null || walletAccountInfo === void 0 ? void 0 : walletAccountInfo.data.length);\n    const receiverAccountInfo = await connection.getAccountInfo(destPubkey);\n    console.log(\"receiver data size\", receiverAccountInfo === null || receiverAccountInfo === void 0 ? void 0 : receiverAccountInfo.data.length);\n    const instruction = SystemProgram.transfer({\n      fromPubkey: wallet.publicKey,\n      toPubkey: destPubkey,\n      lamports // about half a SOL\n\n    });\n    let trans = await setWalletTransaction(instruction);\n    let signature = await signAndSendTransaction(wallet, trans);\n    let result = await connection.confirmTransaction(signature, \"singleGossip\");\n    console.log(\"money sent\", result);\n  } catch (e) {\n    console.warn(\"Failed\", e);\n  }\n}\nexport async function setWalletTransaction(instruction) {\n  const transaction = new Transaction();\n  transaction.add(instruction);\n  transaction.feePayer = wallet.publicKey;\n  let hash = await connection.getRecentBlockhash();\n  console.log(\"blockhash\", hash);\n  transaction.recentBlockhash = hash.blockhash;\n  return transaction;\n}\nexport async function signAndSendTransaction(wallet, transaction) {\n  let signedTrans = await wallet.signTransaction(transaction);\n  console.log(\"sign transaction\");\n  let signature = await connection.sendRawTransaction(signedTrans.serialize());\n  console.log(\"send raw transaction\");\n  return signature;\n}","map":{"version":3,"sources":["/home/ubuntu/MERN-boilerPlate/client/src/component/solanaWallet/wallet.tsx"],"names":["Wallet","Connection","SystemProgram","Transaction","PublicKey","cluster","connection","wallet","initWallet","connect","console","log","publicKey","toBase58","sendMoney","destPubkeyStr","lamports","destPubkey","walletAccountInfo","getAccountInfo","data","length","receiverAccountInfo","instruction","transfer","fromPubkey","toPubkey","trans","setWalletTransaction","signature","signAndSendTransaction","result","confirmTransaction","e","warn","transaction","add","feePayer","hash","getRecentBlockhash","recentBlockhash","blockhash","signedTrans","signTransaction","sendRawTransaction","serialize"],"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","sourcesContent":["// import { WalletAdapter } from \"@solana/wallet-base\";\n\n// import Wallet from \"@project-serum/sol-wallet-adapter\";\n// import { Button } from \"antd\";\n// import React, { useCallback, useContext, useEffect, useMemo, useState } from \"react\";\n// // import { notify } from \"./../utils/notifications\";\n// import { useConnectionConfig } from \"./connection\";\n// import { useLocalStorageState } from \"../utils/utils\";\n// import { PhantomWalletAdapter } from \"../wallet-adapters/phantom\";\n// import { useLocation } from \"react-router\";\n// import { MetaplexModal } from \"../components/MetaplexModal\";\n\n// import './wallet.css'\n// import { TorusWalletAdapter } from \"../wallet-adapters/torus\";\n\n\n// const ASSETS_URL = 'https://raw.githubusercontent.com/solana-labs/oyster/main/assets/wallets/';\n// export const WALLET_PROVIDERS = [\n//   {\n//     name: \"Phantom\",\n//     url: \"https://www.phantom.app\",\n//     icon: `https://www.phantom.app/img/logo.png`,\n//     adapter: PhantomWalletAdapter,\n//   },\n//   {\n//     name: \"Sollet\",\n//     url: \"https://www.sollet.io\",\n//     icon: `${ASSETS_URL}sollet.svg`,\n//   },\n//   {\n//     name: \"MathWallet\",\n//     url: \"https://mathwallet.org\",\n//     icon: `${ASSETS_URL}mathwallet.svg`,\n//   },\n//   {\n//     name: 'Torus',\n//     url: 'https://tor.us',\n//     icon: `${ASSETS_URL}torus.svg`,\n//     adapter: TorusWalletAdapter,\n//   }\n// ];\n\n// const WalletContext = React.createContext<{\n//   wallet: WalletAdapter | undefined,\n//   connected: boolean,\n//   select: () => void,\n//   provider: typeof WALLET_PROVIDERS[number] | undefined,\n// }>({\n//   wallet: undefined,\n//   connected: false,\n//   select() { },\n//   provider: undefined,\n// });\n\n// export function WalletProvider({ children = null as any }) {\n//   const { endpoint } = useConnectionConfig();\n//   const location = useLocation();\n//   const [autoConnect, setAutoConnect] = useState(location.pathname.indexOf('result=') >= 0 || false);\n//   const [providerUrl, setProviderUrl] = useLocalStorageState(\"walletProvider\");\n\n//   const provider = useMemo(() => WALLET_PROVIDERS.find(({ url }) => url === providerUrl), [providerUrl]);\n\n//   const wallet = useMemo(function () {\n//     if (provider) {\n//       return new (provider.adapter || Wallet)(providerUrl, endpoint) as WalletAdapter;\n//     }\n//   }, [provider, providerUrl, endpoint]);\n\n//   const [connected, setConnected] = useState(false);\n\n//   useEffect(() => {\n//     if (wallet?.publicKey && connected) {\n//       const walletPublicKey = wallet.publicKey.toBase58();\n//       const keyToDisplay =\n//         walletPublicKey.length > 20\n//           ? `${walletPublicKey.substring(0, 7)}.....${walletPublicKey.substring(\n//             walletPublicKey.length - 7,\n//             walletPublicKey.length\n//           )}`\n//           : walletPublicKey;\n//       // notify({\n//       //   message: \"Wallet update\",\n//       //   description: \"Connected to wallet \" + keyToDisplay,\n//       // });\n//     }\n\n//   }, [connected])\n\n//   useEffect(() => {\n//     if (wallet) {\n//       wallet.on(\"connect\", () => {\n//         if (wallet.publicKey) {\n//           setConnected(true);\n//         }\n//       });\n\n//       wallet.on(\"disconnect\", () => {\n//         setConnected(false);\n//         // notify({\n//         //   message: \"Wallet update\",\n//         //   description: \"Disconnected from wallet\",\n//         // });\n//       });\n//     }\n\n//     return () => {\n//       setConnected(false);\n//       if (wallet) {\n//         wallet.disconnect();\n//       }\n//     };\n//   }, [wallet]);\n\n//   useEffect(() => {\n//     if (wallet && autoConnect) {\n//       wallet.connect();\n//       setAutoConnect(false);\n//     }\n\n//     return () => { }\n//   }, [wallet, autoConnect]);\n\n//   const [isModalVisible, setIsModalVisible] = useState(false);\n//   const [showProviders, setShowProviders] = useState(false);\n\n//   const select = useCallback(() => setIsModalVisible(true), []);\n//   const close = useCallback(() => {\n//     setIsModalVisible(false)\n//     setShowProviders(false)\n//   }, []);\n\n//   const pp = WALLET_PROVIDERS.find(wp => wp.name === \"Phantom\")\n\n//   return (\n//     <WalletContext.Provider\n//       value={{\n//         wallet,\n//         connected,\n//         select,\n//         provider,\n//       }}\n//     >\n//       {children}\n//       <MetaplexModal\n//         visible={isModalVisible}\n//         onCancel={close}\n//       >\n//         <div style={{\n//           background: 'linear-gradient(180deg, #D329FC 0%, #8F6DDE 49.48%, #19E6AD 100%)',\n//           borderRadius: 36,\n//           width: 50,\n//           height: 50,\n//           textAlign: 'center',\n//           verticalAlign: 'middle',\n//           fontWeight: 700,\n//           fontSize: '1.3rem',\n//           lineHeight: 2.4,\n//           marginBottom: 10,\n//         }}>M</div>\n\n//         <h2>{provider ? 'Change provider' : 'Welcome to Metaplex'}</h2>\n//         <p>{provider ? 'Feel free to switch wallet provider' : 'You must be signed in to place a bid'}</p>\n\n//         <br />\n\n//         {(provider || showProviders) ? <>\n//           {WALLET_PROVIDERS.map((provider, idx) => {\n//             if (providerUrl === provider.url) return null\n\n//             const onClick = function () {\n//               setProviderUrl(provider.url);\n//               setAutoConnect(true);\n//               close();\n//             }\n//             return (\n//               <Button\n//                 key={idx}\n//                 size=\"large\"\n//                 type={providerUrl === provider.url ? \"primary\" : \"ghost\"}\n//                 onClick={onClick}\n//                 icon={\n//                   <img\n//                     alt={`${provider.name}`}\n//                     width={20}\n//                     height={20}\n//                     src={provider.icon}\n//                     style={{ marginRight: 8 }} />\n//                 }\n//                 style={{\n//                   display: \"block\",\n//                   width: \"100%\",\n//                   textAlign: \"left\",\n//                   marginBottom: 8,\n//                 }}>{provider.name}</Button>\n//             )\n//           })}\n//         </> : <>\n//           <Button\n//             className=\"metaplex-button\"\n//             style={{\n//               width: '80%',\n//               fontWeight: 'unset',\n//             }}\n//             onClick={_ => {\n//               setProviderUrl(pp?.url);\n//               setAutoConnect(true);\n//               close();\n//             }}\n//           >\n//             <span><img src={pp?.icon} style={{ width: '1.2rem' }} />&nbsp;Sign in with Phantom</span>\n//             <span>&gt;</span>\n//           </Button>\n//           <p onClick={_ => setShowProviders(true)} style={{ cursor: 'pointer', marginTop: 10 }}>\n//             Select a different Solana wallet\n//           </p>\n//         </>}\n\n//       </MetaplexModal>\n//     </WalletContext.Provider>\n//   );\n// }\n\n// export const useWallet = () => {\n//   const { wallet, connected, provider, select } = useContext(WalletContext);\n//   return {\n//     wallet,\n//     connected,\n//     provider,\n//     select,\n//     connect() {\n//       wallet ? wallet.connect() : select();\n//     },\n//     disconnect() {\n//       wallet?.disconnect();\n//     },\n//   };\n// }\n\n\n////////////////////////////////\n\n\n\nimport Wallet from \"@project-serum/sol-wallet-adapter\";\nimport {\n  Connection,\n  SystemProgram,\n  Transaction,\n  PublicKey,\n  TransactionInstruction,\n} from \"@solana/web3.js\";\nimport EventEmitter from \"eventemitter3\";\n\nexport interface WalletAdapter extends EventEmitter {\n  publicKey: PublicKey | null;\n  signTransaction: (transaction: Transaction) => Promise<Transaction>;\n  connect: () => any;\n  disconnect: () => any;\n}\n\nconst cluster = \"http://devnet.solana.com\";\nconst connection = new Connection(cluster, \"confirmed\");\nconst wallet: WalletAdapter = new Wallet(\"https://www.sollet.io\", cluster);\n\nexport async function initWallet(): Promise<[Connection, WalletAdapter]> {\n  await wallet.connect();\n  console.log(\"wallet publicKey\", wallet?.publicKey?.toBase58());\n  return [connection, wallet];\n}\n\nexport async function sendMoney(\n  destPubkeyStr: string,\n  lamports: number = 500 * 1000000\n) {\n  try {\n    console.log(\"starting sendMoney\");\n    const destPubkey = new PublicKey(destPubkeyStr);\n    const walletAccountInfo = await connection.getAccountInfo(\n      wallet!.publicKey!\n    );\n    console.log(\"wallet data size\", walletAccountInfo?.data.length);\n\n    const receiverAccountInfo = await connection.getAccountInfo(destPubkey);\n    console.log(\"receiver data size\", receiverAccountInfo?.data.length);\n\n    const instruction = SystemProgram.transfer({\n      fromPubkey: wallet!.publicKey!,\n      toPubkey: destPubkey,\n      lamports, // about half a SOL\n    });\n    let trans = await setWalletTransaction(instruction);\n\n    let signature = await signAndSendTransaction(wallet, trans);\n    let result = await connection.confirmTransaction(signature, \"singleGossip\");\n    console.log(\"money sent\", result);\n  } catch (e) {\n    console.warn(\"Failed\", e);\n  }\n}\n\nexport async function setWalletTransaction(\n  instruction: TransactionInstruction\n): Promise<Transaction> {\n  const transaction = new Transaction();\n  transaction.add(instruction);\n  transaction.feePayer = wallet!.publicKey!;\n  let hash = await connection.getRecentBlockhash();\n  console.log(\"blockhash\", hash);\n  transaction.recentBlockhash = hash.blockhash;\n  return transaction;\n}\n\nexport async function signAndSendTransaction(\n  wallet: WalletAdapter,\n  transaction: Transaction\n): Promise<string> {\n  let signedTrans = await wallet.signTransaction(transaction);\n  console.log(\"sign transaction\");\n  let signature = await connection.sendRawTransaction(signedTrans.serialize());\n  console.log(\"send raw transaction\");\n  return signature;\n}\n"]},"metadata":{},"sourceType":"module"}