{"ast":null,"code":"var _jsxFileName = \"/home/ubuntu/MERN-boilerPlate/client/src/component/user/index.tsx\",\n    _s = $RefreshSig$();\n\nimport { clusterApiUrl, Connection } from \"@solana/web3.js\";\nimport React, { useEffect, useState } from \"react\";\nimport * as api from \"../../action/mintTokenAction\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Index = () => {\n  _s();\n\n  let [cnxnStatus, setCnxnStatus] = useState(window.solana.isConnected ? \"Disconnect\" : \"Connect\");\n  let [pubkey, setPubkey] = useState('no pk');\n  let [mintPK, setMintPK] = useState(); // const getProvider = () => {\n  //   if (\"solana\" in window) {\n  //     const provider = window.solana;\n  //     if (provider.isPhantom) {\n  //       return provider;\n  //     }\n  //   }\n  //   window.open(\"https://phantom.app/\", \"_blank\");\n  // };\n\n  const connectAction = async () => {\n    console.log(window.solana.isConnected);\n\n    if (!window.solana.isConnected) {\n      await window.solana.connect().then().then(() => {\n        console.log(window.solana.isConnected);\n      });\n      setCnxnStatus('Disconnect'); // setPubkey(window.solana.publicKey?.toString());\n    } else {\n      await window.solana.disconnect(); // console.log(window.solana.publicKey?.toString());\n\n      setCnxnStatus('Connect'); // setPubkey('no pubkey')\n    }\n  };\n\n  const createNFT = async () => {\n    var _window$solana$public;\n\n    var connection = new Connection(clusterApiUrl('devnet'), 'confirmed'); //   const transaction = new Transaction();\n    //   const signedTransaction = await window.solana.signTransaction(transaction);\n    // const signature = await connection.sendRawTransaction(signedTransaction.serialize());\n\n    let data = {\n      'walletPK': (_window$solana$public = window.solana.publicKey) === null || _window$solana$public === void 0 ? void 0 : _window$solana$public.toString() // 'transaction' : signedTransaction ,\n      // 'signature': signature\n\n    };\n    console.log('data', data);\n    api.mintNFT(data).then(res => {\n      console.log('res', res); // setMintPK(JSON.parse(res).Token)\n    });\n  };\n\n  useEffect(() => {\n    setTimeout(() => {\n      var _window$solana$public2, _window$solana$public3;\n\n      setPubkey((_window$solana$public2 = window.solana.publicKey) === null || _window$solana$public2 === void 0 ? void 0 : _window$solana$public2.toString());\n      console.log((_window$solana$public3 = window.solana.publicKey) === null || _window$solana$public3 === void 0 ? void 0 : _window$solana$public3.toString());\n    }, 10000);\n  }, [pubkey]); // useEffect(() => {\n  //   setPubkey(window.solana.publicKey?.toString())\n  // }, [window.solana.isConnected]);\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n      children: \"user panel\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: pubkey\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => {\n          connectAction();\n        },\n        children: cnxnStatus\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 7\n    }, this), pubkey !== 'no pk' && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => {\n          createNFT();\n        },\n        children: \"Create NFT\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 9\n      }, this), mintPK]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 93,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Index, \"RguBDnhFPjBrmUHy8tgspTwD3ww=\");\n\n_c = Index;\nexport default Index;\n\nvar _c;\n\n$RefreshReg$(_c, \"Index\");","map":{"version":3,"sources":["/home/ubuntu/MERN-boilerPlate/client/src/component/user/index.tsx"],"names":["clusterApiUrl","Connection","React","useEffect","useState","api","Index","cnxnStatus","setCnxnStatus","window","solana","isConnected","pubkey","setPubkey","mintPK","setMintPK","connectAction","console","log","connect","then","disconnect","createNFT","connection","data","publicKey","toString","mintNFT","res","setTimeout"],"mappings":"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","sourcesContent":["import { clusterApiUrl, Connection, Transaction }  from \"@solana/web3.js\";\nimport * as web3 from \"@solana/web3.js\";\nimport React, { useEffect, useState } from \"react\";\nimport * as api from \"../../action/mintTokenAction\"\nimport { PublicKey } from \"@solana/web3.js\";\nimport { pickBy } from \"lodash\";\n// import Wallet from \"../solanaWallet/wallet\"\n  declare const window: any;\n\nconst Index = () => {\n\n  let [cnxnStatus , setCnxnStatus] = useState (window.solana.isConnected ? \"Disconnect\" : \"Connect\");\n  let [pubkey , setPubkey] = useState ('no pk');\n  let [mintPK , setMintPK] = useState ();\n\n  // const getProvider = () => {\n  //   if (\"solana\" in window) {\n  //     const provider = window.solana;\n  //     if (provider.isPhantom) {\n  //       return provider;\n  //     }\n  //   }\n  //   window.open(\"https://phantom.app/\", \"_blank\");\n  // };\n\n  const connectAction = async () => {\n    console.log(window.solana.isConnected);\n\n    if(!window.solana.isConnected) {\n     await window.solana.connect().then().then(()=>{\n\n       console.log(window.solana.isConnected);\n     });\n        setCnxnStatus('Disconnect');\n        // setPubkey(window.solana.publicKey?.toString());\n      \n    }\n    else { \n      await window.solana.disconnect();\n        // console.log(window.solana.publicKey?.toString());\n        setCnxnStatus('Connect');\n        // setPubkey('no pubkey')\n\n    }\n  }\n\nconst createNFT = async () => {\n\n\n  var connection = new Connection(\n    clusterApiUrl('devnet'),\n    'confirmed',\n  );\n\n//   const transaction = new Transaction();\n//   const signedTransaction = await window.solana.signTransaction(transaction);\n// const signature = await connection.sendRawTransaction(signedTransaction.serialize());\n\n    let data = {\n      'walletPK': window.solana.publicKey?.toString() ,\n      // 'transaction' : signedTransaction ,\n      // 'signature': signature\n    };\n    console.log('data',data);\n    \n    api.mintNFT(data).then(res =>{\n      console.log('res',res);\n      // setMintPK(JSON.parse(res).Token)\n    });\n\n  }\n\n\n  useEffect(() => {\n    setTimeout(() => {\n      setPubkey(window.solana.publicKey?.toString());\n      console.log(window.solana.publicKey?.toString());\n\n    }, 10000)\n  }, [pubkey])\n\n\n  \n\n  // useEffect(() => {\n\n  //   setPubkey(window.solana.publicKey?.toString())\n\n  // }, [window.solana.isConnected]);\n\n  \n    return (\n    <div>\n      <h3>user panel</h3>\n      <div>\n        <h2>{pubkey}</h2>\n        <button onClick={()=>{connectAction()}} > \n        \n          {cnxnStatus}\n        </button>\n      </div>\n        {pubkey!=='no pk' && (\n        <div>\n\n        <button onClick={()=>{createNFT()}} > \n        \n        Create NFT\n      </button>\n      {mintPK}\n        </div>)}\n      {/* <Wallet></Wallet> */}\n    </div>\n  )\n};\nexport default Index\n\n"]},"metadata":{},"sourceType":"module"}