[{"/home/ubuntu/MERN-boilerPlate/client/src/index.js":"1","/home/ubuntu/MERN-boilerPlate/client/src/App.js":"2","/home/ubuntu/MERN-boilerPlate/client/src/pages/SignUp.js":"3","/home/ubuntu/MERN-boilerPlate/client/src/pages/SignIn.js":"4","/home/ubuntu/MERN-boilerPlate/client/src/component/admin/index.js":"5","/home/ubuntu/MERN-boilerPlate/client/src/component/Header.js":"6","/home/ubuntu/MERN-boilerPlate/client/src/component/private/Protected.js":"7","/home/ubuntu/MERN-boilerPlate/client/src/component/SignUpComponet.js":"8","/home/ubuntu/MERN-boilerPlate/client/src/component/SigninComponent.js":"9","/home/ubuntu/MERN-boilerPlate/client/src/action/authAcation.js":"10","/home/ubuntu/MERN-boilerPlate/client/src/config/config.js":"11","/home/ubuntu/MERN-boilerPlate/client/src/component/solanaWallet/wallet.tsx":"12","/home/ubuntu/MERN-boilerPlate/client/src/component/user/index.tsx":"13","/home/ubuntu/MERN-boilerPlate/client/src/action/mintTokenAction.ts":"14"},{"size":219,"mtime":1628121023636,"results":"15","hashOfConfig":"16"},{"size":811,"mtime":1628173330004,"results":"17","hashOfConfig":"16"},{"size":384,"mtime":1628121023636,"results":"18","hashOfConfig":"16"},{"size":386,"mtime":1628121023636,"results":"19","hashOfConfig":"16"},{"size":140,"mtime":1628121023636,"results":"20","hashOfConfig":"16"},{"size":2360,"mtime":1628121023636,"results":"21","hashOfConfig":"16"},{"size":392,"mtime":1628121023636,"results":"22","hashOfConfig":"16"},{"size":2991,"mtime":1628121023636,"results":"23","hashOfConfig":"16"},{"size":2652,"mtime":1628192242691,"results":"24","hashOfConfig":"16"},{"size":2264,"mtime":1628121023636,"results":"25","hashOfConfig":"16"},{"size":48,"mtime":1628121023636,"results":"26","hashOfConfig":"16"},{"size":9813,"mtime":1628171401538,"results":"27","hashOfConfig":"16"},{"size":6746,"mtime":1629661300403,"results":"28","hashOfConfig":"16"},{"size":823,"mtime":1629661265753,"results":"29","hashOfConfig":"16"},{"filePath":"30","messages":"31","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},"u2ouod",{"filePath":"33","messages":"34","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"35","messages":"36","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"37","messages":"38","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"39","messages":"40","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"41","messages":"42","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"43","messages":"44","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"45","usedDeprecatedRules":"32"},{"filePath":"46","messages":"47","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"48","messages":"49","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"50","messages":"51","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"52","messages":"53","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"54","messages":"55","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"56","messages":"57","errorCount":0,"fatalErrorCount":0,"warningCount":15,"fixableErrorCount":0,"fixableWarningCount":0,"source":"58"},{"filePath":"59","messages":"60","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"61"},"/home/ubuntu/MERN-boilerPlate/client/src/index.js",[],["62","63"],"/home/ubuntu/MERN-boilerPlate/client/src/App.js",[],"/home/ubuntu/MERN-boilerPlate/client/src/pages/SignUp.js",[],"/home/ubuntu/MERN-boilerPlate/client/src/pages/SignIn.js",[],"/home/ubuntu/MERN-boilerPlate/client/src/component/admin/index.js",[],"/home/ubuntu/MERN-boilerPlate/client/src/component/Header.js",[],"/home/ubuntu/MERN-boilerPlate/client/src/component/private/Protected.js",["64"],"import React, { useEffect } from \"react\";\nimport { withRouter } from \"react-router-dom\";\nimport { isAuth } from \"../../action/authAcation\";\nconst Protected = ({ history }) => {\n  useEffect(() => {\n    if (!isAuth()) {\n      history.push(\"/signin\");\n    } else if (isAuth().role !== 1) {\n      history.push(\"/\");\n    }\n  }, []);\n  return <div></div>;\n};\n\nexport default withRouter(Protected);\n","/home/ubuntu/MERN-boilerPlate/client/src/component/SignUpComponet.js",[],"/home/ubuntu/MERN-boilerPlate/client/src/component/SigninComponent.js",[],"/home/ubuntu/MERN-boilerPlate/client/src/action/authAcation.js",[],"/home/ubuntu/MERN-boilerPlate/client/src/config/config.js",[],"/home/ubuntu/MERN-boilerPlate/client/src/component/solanaWallet/wallet.tsx",[],"/home/ubuntu/MERN-boilerPlate/client/src/component/user/index.tsx",["65","66","67","68","69","70","71","72","73","74","75","76","77","78","79"],"import { clusterApiUrl, Connection, Transaction , PublicKey} from \"@solana/web3.js\";\nimport * as web3 from \"@solana/web3.js\";\nimport React, { useEffect, useLayoutEffect, useState } from \"react\";\nimport * as api from \"../../action/mintTokenAction\"\nimport { pickBy } from \"lodash\";\nimport * as splToken from \"@solana/spl-token\";\n\nimport {parse, stringify, toJSON, fromJSON} from 'flatted';\n// import Wallet from \"../solanaWallet/wallet\"\ndeclare const window: any;\n\nconst Index = () => {\n\n  let [cnxnStatus, setCnxnStatus] = useState(window.solana.isConnected ? \"Disconnect\" : \"Connect\");\n  let [pubkey, setPubkey] = useState('no pk');\n  let [mintPK, setMintPK] = useState('');\n  let [myMintPK, setMyMintPK] = useState('');\n\n  // const getProvider = () => {\n  //   if (\"solana\" in window) {\n  //     const provider = window.solana;\n  //     if (provider.isPhantom) {\n  //       return provider;\n  //     }\n  //   }\n  //   window.open(\"https://phantom.app/\", \"_blank\");\n  // };\n\n  const connectAction = async () => {\n    console.log(window.solana.isConnected);\n\n    if (!window.solana.isConnected) {\n      await window.solana.connect();\n      setCnxnStatus('Disconnect');\n      console.log('connected');\n      \n\n    }\n    else {\n      await window.solana.disconnect();\n      setCnxnStatus('Connect');\n      setPubkey('deleted');\n      \n\n    }\n  }\n\n  const createWallet = async () => {\n    api.createWallet().then(res => {\n      console.log('wallet', res.data.wallet);\n    });\n  }\n\n  const createNFTByMyContract = async () => {\n\n    var connection = new Connection(\n      clusterApiUrl('devnet'),\n      'confirmed',\n    );\n\n    \n\n    let data = {\n      'walletPK': window.solana.publicKey?.toString(),\n      // 'transaction' : signedTransaction ,\n      // 'signature': signature\n    };\n    console.log('data', data);\n/*\n\n    const mintAccount = web3.Keypair.generate();\n\n    const balanceNeeded = await splToken.Token.getMinBalanceRentForExemptMint(\n      connection,\n    );\n  \n    // const transaction = new web3.Transaction();\n    const transaction2 = new web3.Transaction();\n\n  // let myToken = new splToken.Token(\n  //   connection ,\n  //   mintAccount.publicKey,\n  //   myProgramId,\n  //   marketplaceWallet\n  // )\n\n// console.log('splToken.MintLayout',splToken.MintLayout);\n\n  // transaction2.add(\n  //   web3.SystemProgram.createAccount({\n  //     fromPubkey: window.solana.publicKey,\n  //     newAccountPubkey: mintAccount.publicKey,\n  //     lamports: balanceNeeded,\n  //     space: splToken.MintLayout.span,\n  //     programId: splToken.TOKEN_PROGRAM_ID,\n  //   }),\n  // );\n    transaction2.add(\n      splToken.Token.createInitMintInstruction(\n        splToken.ASSOCIATED_TOKEN_PROGRAM_ID,\n        mintAccount.publicKey,\n        0,\n        window.solana.publicKey,\n        null,\n      ),\n    );\n\n\nlet to = new web3.PublicKey('5R7BnfH2kuvxU4WRhog4vBmCABXQB9Y1hkHu8hqh3MyF');\n  // transaction.add(\n  //   web3.SystemProgram.transfer({\n  //   fromPubkey: window.solana.publicKey,\n  //   toPubkey: to,\n  //   lamports: 100\n  // })\n  // );\n\n    transaction2.feePayer = window.solana.publicKey;\n    transaction2.recentBlockhash = (\n      await connection.getRecentBlockhash()\n    ).blockhash;\n\n\n\n    transaction2.sign(mintAccount);\n\n    console.log('transaction', transaction2);\n\n    \n    const signedTransaction  = await window.solana.signTransaction(transaction2);\n    \n      const signature = await connection.sendRawTransaction(signedTransaction.serialize());\n      console.log('signedTransactions', signedTransaction);\n      console.log('signature', signature);\n    \n\n*/\n    api.mintMyNFT(data).then(async res => {\n      // console.log('token', parse(res.data.token));\n      console.log('res', res.data.transaction);\n      let transaction = res.data.transaction as Transaction;\n    console.log('transaction', transaction);\n    });\n// let transaction = new web3.Transaction();\n// tran.instructions.forEach(ins =>{\n//   transaction.add(ins);\n// });\n/*\n\n    // transaction.add(res.data.transaction.instructions[0])\n    transaction.feePayer = window.solana.publicKey;\n    transaction.recentBlockhash = (\n      await connection.getRecentBlockhash()\n    ).blockhash;\n\n      console.log('transaction', transaction);\n\n      // const signedTransaction = await window.solana.signTransaction(transaction);\n      // const signature = await connection.sendRawTransaction(signedTransaction.serialize());\n      // console.log('signedTransaction', signedTransaction);\n      // console.log('signature', signature);\n\n      // setMintPK(JSON.stringify(signature));\n      setMintPK(res.data.token);\n    });\n    */\n\n  }\n\n\n  const createNFT = async () => {\n\n    var connection = new Connection(\n      clusterApiUrl('devnet'),\n      'confirmed',\n    );\n\n\n\n    let data = {\n      'walletPK': window.solana.publicKey?.toString(),\n      // 'transaction' : signedTransaction ,\n      // 'signature': signature\n    };\n    console.log('data', data);\n\n    \n\n\n    api.mintNFT(data).then(async res => {\n      // console.log('token', parse(res.data.token));\n      console.log('res', res.data);\n\n    // const transaction = new web3.Transaction();\n    // transaction.add(res.data.transaction.instructions[0])\n    // transaction.feePayer = window.solana.publicKey;\n    // transaction.recentBlockhash = (\n    //   await connection.getRecentBlockhash()\n    // ).blockhash;\n    //   const signedTransaction = await window.solana.signTransaction(transaction);\n    //   const signature = await connection.sendRawTransaction(signedTransaction.serialize());\n    //   console.log('signedTransaction', signedTransaction);\n      console.log('tokenPK', res.data.token);\n\n      // setMintPK(JSON.stringify(signature));\n      setMintPK(res.data.token);\n    });\n    \n\n  }\n\n\n\n  useEffect(() => {\n    setTimeout(() => {\n      setPubkey(window.solana.publicKey?.toString());\n      console.log(window.solana.publicKey?.toString());\n\n    }, 10000)\n    setPubkey(window.solana.publicKey?.toString());\n\n    \n    // console.log('setPubkey',pubkey);\n    \n\n  }, [window.solana.publicKey])\n\n\n  // useEffect(() => {\n\n  //   setPubkey(window.solana.publicKey?.toString())\n\n  // }, [window.solana.isConnected]);\n\n\n  return (\n    <div>\n      <h3>user panel</h3>\n      <div>\n        <h2>walletPK : {pubkey}</h2>\n        <button onClick={() => { connectAction() }} >\n\n          {cnxnStatus}\n        </button>\n      </div>\n      {window.solana.publicKey && (\n        <div>\n\n          <button onClick={() => { createNFT() }} >\n\n            Create NFT\n          </button>\n\n          <button onClick={() => { createNFTByMyContract() }} >\n\n            Create My NFT\n          </button>\n\n          <br></br>\n          {mintPK}\n        </div>)}\n      {/* <Wallet></Wallet> */}\n    </div>\n  )\n};\nexport default Index\n\n","/home/ubuntu/MERN-boilerPlate/client/src/action/mintTokenAction.ts",["80","81","82","83"],"import axios from 'axios'\nimport * as web3 from \"@solana/web3.js\"\n\nconst url = 'http://localhost:5000';\n// const url = process.env.REACT_APP_NODE_APP_URL;\n// console.log('process.env.REACT_APP_NODE_APP_URL');\n// console.log(process.env);\n// console.log(process.env.PUBLIC_URL);\n\n\nconst urll = 'http://localhost:5008';\nconst API = axios.create();\n\n// products\nexport const mintNFT = (data:any)=> axios.post(`/api/mint`,data);\nexport const mintMyNFT = (data:any)=> axios.post(`/api/mintMyNFT`,data);\nexport const createWallet = () => axios.get(`/api/createWallet`);\n// export const fetchProductById = (id)=> axios.get(`/products/${id}`);\n// export const createProduct = (newProduct)=> axios.post(`/products`, newProduct);\n// export const updateProduct = (id, updatedProduct) => axios.patch(`/products/${id}`, updatedProduct);",{"ruleId":"84","replacedBy":"85"},{"ruleId":"86","replacedBy":"87"},{"ruleId":"88","severity":1,"message":"89","line":11,"column":6,"nodeType":"90","endLine":11,"endColumn":8,"suggestions":"91"},{"ruleId":"92","severity":1,"message":"93","line":1,"column":51,"nodeType":"94","messageId":"95","endLine":1,"endColumn":60},{"ruleId":"92","severity":1,"message":"96","line":2,"column":13,"nodeType":"94","messageId":"95","endLine":2,"endColumn":17},{"ruleId":"92","severity":1,"message":"97","line":3,"column":28,"nodeType":"94","messageId":"95","endLine":3,"endColumn":43},{"ruleId":"92","severity":1,"message":"98","line":5,"column":10,"nodeType":"94","messageId":"95","endLine":5,"endColumn":16},{"ruleId":"92","severity":1,"message":"99","line":6,"column":13,"nodeType":"94","messageId":"95","endLine":6,"endColumn":21},{"ruleId":"92","severity":1,"message":"100","line":8,"column":9,"nodeType":"94","messageId":"95","endLine":8,"endColumn":14},{"ruleId":"92","severity":1,"message":"101","line":8,"column":16,"nodeType":"94","messageId":"95","endLine":8,"endColumn":25},{"ruleId":"92","severity":1,"message":"102","line":8,"column":27,"nodeType":"94","messageId":"95","endLine":8,"endColumn":33},{"ruleId":"92","severity":1,"message":"103","line":8,"column":35,"nodeType":"94","messageId":"95","endLine":8,"endColumn":43},{"ruleId":"92","severity":1,"message":"104","line":17,"column":8,"nodeType":"94","messageId":"95","endLine":17,"endColumn":16},{"ruleId":"92","severity":1,"message":"105","line":17,"column":18,"nodeType":"94","messageId":"95","endLine":17,"endColumn":29},{"ruleId":"92","severity":1,"message":"106","line":48,"column":9,"nodeType":"94","messageId":"95","endLine":48,"endColumn":21},{"ruleId":"92","severity":1,"message":"107","line":56,"column":9,"nodeType":"94","messageId":"95","endLine":56,"endColumn":19},{"ruleId":"92","severity":1,"message":"107","line":173,"column":9,"nodeType":"94","messageId":"95","endLine":173,"endColumn":19},{"ruleId":"88","severity":1,"message":"108","line":226,"column":6,"nodeType":"90","endLine":226,"endColumn":31,"suggestions":"109"},{"ruleId":"92","severity":1,"message":"96","line":2,"column":13,"nodeType":"94","messageId":"95","endLine":2,"endColumn":17},{"ruleId":"92","severity":1,"message":"110","line":4,"column":7,"nodeType":"94","messageId":"95","endLine":4,"endColumn":10},{"ruleId":"92","severity":1,"message":"111","line":11,"column":7,"nodeType":"94","messageId":"95","endLine":11,"endColumn":11},{"ruleId":"92","severity":1,"message":"112","line":12,"column":7,"nodeType":"94","messageId":"95","endLine":12,"endColumn":10},"no-native-reassign",["113"],"no-negated-in-lhs",["114"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'history'. Either include it or remove the dependency array.","ArrayExpression",["115"],"@typescript-eslint/no-unused-vars","'PublicKey' is defined but never used.","Identifier","unusedVar","'web3' is defined but never used.","'useLayoutEffect' is defined but never used.","'pickBy' is defined but never used.","'splToken' is defined but never used.","'parse' is defined but never used.","'stringify' is defined but never used.","'toJSON' is defined but never used.","'fromJSON' is defined but never used.","'myMintPK' is assigned a value but never used.","'setMyMintPK' is assigned a value but never used.","'createWallet' is assigned a value but never used.","'connection' is assigned a value but never used.","React Hook useEffect has an unnecessary dependency: 'window.solana.publicKey'. Either exclude it or remove the dependency array. Outer scope values like 'window.solana.publicKey' aren't valid dependencies because mutating them doesn't re-render the component.",["116"],"'url' is assigned a value but never used.","'urll' is assigned a value but never used.","'API' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"117","fix":"118"},{"desc":"119","fix":"120"},"Update the dependencies array to be: [history]",{"range":"121","text":"122"},"Update the dependencies array to be: []",{"range":"123","text":"124"},[323,325],"[history]",[6005,6030],"[]"]