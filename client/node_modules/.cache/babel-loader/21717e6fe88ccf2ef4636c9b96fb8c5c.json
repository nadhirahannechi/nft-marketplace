{"ast":null,"code":"var _jsxFileName = \"/home/ubuntu/MERN-boilerPlate/client/src/component/user/index.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\"; // import Wallet from \"../solanaWallet/wallet\"\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Index = () => {\n  _s();\n\n  let [cnxnStatus, setCnxnStatus] = useState(window.solana.isConnected ? \"Disconnect\" : \"Connect\");\n  let [pubkey, setPubkey] = useState('no pk'); // const getProvider = () => {\n  //   if (\"solana\" in window) {\n  //     const provider = window.solana;\n  //     if (provider.isPhantom) {\n  //       return provider;\n  //     }\n  //   }\n  //   window.open(\"https://phantom.app/\", \"_blank\");\n  // };\n\n  const connectAction = async () => {\n    if (!window.solana.isConnected) {\n      var _window$solana$public, _window$solana$public2;\n\n      await window.solana.connect();\n      console.log((_window$solana$public = window.solana.publicKey) === null || _window$solana$public === void 0 ? void 0 : _window$solana$public.toString());\n      setCnxnStatus('Disconnect');\n      setPubkey((_window$solana$public2 = window.solana.publicKey) === null || _window$solana$public2 === void 0 ? void 0 : _window$solana$public2.toString());\n    } else {\n      await window.solana.disconnect(); // console.log(window.solana.publicKey?.toString());\n\n      setCnxnStatus('Connect');\n      setPubkey('no pubkey');\n    }\n  }; // useEffect(() => {\n  //   setPubkey(window.solana.publicKey?.toString())\n  // }, [window.solana.isConnected]);\n\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n      children: \"user panel\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: pubkey\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => {\n          connectAction();\n        },\n        children: cnxnStatus\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 50,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Index, \"+FWdr60LH6VCk8snguwC3wRlchM=\");\n\n_c = Index;\nexport default Index;\n\nvar _c;\n\n$RefreshReg$(_c, \"Index\");","map":{"version":3,"sources":["/home/ubuntu/MERN-boilerPlate/client/src/component/user/index.tsx"],"names":["React","useState","Index","cnxnStatus","setCnxnStatus","window","solana","isConnected","pubkey","setPubkey","connectAction","connect","console","log","publicKey","toString","disconnect"],"mappings":";;;AAAA,OAAOA,KAAP,IAA2BC,QAA3B,QAA2C,OAA3C,C,CAEA;;;;AAGA,MAAMC,KAAK,GAAG,MAAM;AAAA;;AAElB,MAAI,CAACC,UAAD,EAAcC,aAAd,IAA+BH,QAAQ,CAAEI,MAAM,CAACC,MAAP,CAAcC,WAAd,GAA4B,YAA5B,GAA2C,SAA7C,CAA3C;AACA,MAAI,CAACC,MAAD,EAAUC,SAAV,IAAuBR,QAAQ,CAAE,OAAF,CAAnC,CAHkB,CAKlB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,QAAMS,aAAa,GAAG,YAAY;AAChC,QAAG,CAACL,MAAM,CAACC,MAAP,CAAcC,WAAlB,EAA+B;AAAA;;AAC9B,YAAMF,MAAM,CAACC,MAAP,CAAcK,OAAd,EAAN;AACGC,MAAAA,OAAO,CAACC,GAAR,0BAAYR,MAAM,CAACC,MAAP,CAAcQ,SAA1B,0DAAY,sBAAyBC,QAAzB,EAAZ;AACAX,MAAAA,aAAa,CAAC,YAAD,CAAb;AACAK,MAAAA,SAAS,2BAACJ,MAAM,CAACC,MAAP,CAAcQ,SAAf,2DAAC,uBAAyBC,QAAzB,EAAD,CAAT;AAEH,KAND,MAOK;AACH,YAAMV,MAAM,CAACC,MAAP,CAAcU,UAAd,EAAN,CADG,CAED;;AACAZ,MAAAA,aAAa,CAAC,SAAD,CAAb;AACAK,MAAAA,SAAS,CAAC,WAAD,CAAT;AAEH;AACF,GAfD,CAfkB,CAoClB;AAEA;AAEA;;;AAGE,sBACA;AAAA,4BACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADF,eAEE;AAAA,8BACE;AAAA,kBAAKD;AAAL;AAAA;AAAA;AAAA;AAAA,cADF,eAEE;AAAQ,QAAA,OAAO,EAAE,MAAI;AAACE,UAAAA,aAAa;AAAG,SAAtC;AAAA,kBAEGP;AAFH;AAAA;AAAA;AAAA;AAAA,cAFF;AAAA;AAAA;AAAA;AAAA;AAAA,YAFF;AAAA;AAAA;AAAA;AAAA;AAAA,UADA;AAaH,CAxDD;;GAAMD,K;;KAAAA,K;AAyDN,eAAeA,KAAf","sourcesContent":["import React, { useEffect, useState } from \"react\";\n\n// import Wallet from \"../solanaWallet/wallet\"\n  declare const window: any;\n\nconst Index = () => {\n\n  let [cnxnStatus , setCnxnStatus] = useState (window.solana.isConnected ? \"Disconnect\" : \"Connect\");\n  let [pubkey , setPubkey] = useState ('no pk');\n\n  // const getProvider = () => {\n  //   if (\"solana\" in window) {\n  //     const provider = window.solana;\n  //     if (provider.isPhantom) {\n  //       return provider;\n  //     }\n  //   }\n  //   window.open(\"https://phantom.app/\", \"_blank\");\n  // };\n\n  const connectAction = async () => {\n    if(!window.solana.isConnected) {\n     await window.solana.connect();\n        console.log(window.solana.publicKey?.toString());\n        setCnxnStatus('Disconnect');\n        setPubkey(window.solana.publicKey?.toString());\n      \n    }\n    else { \n      await window.solana.disconnect();\n        // console.log(window.solana.publicKey?.toString());\n        setCnxnStatus('Connect');\n        setPubkey('no pubkey')\n\n    }\n  }\n    \n\n\n  \n\n  // useEffect(() => {\n\n  //   setPubkey(window.solana.publicKey?.toString())\n\n  // }, [window.solana.isConnected]);\n\n  \n    return (\n    <div>\n      <h3>user panel</h3>\n      <div>\n        <h2>{pubkey}</h2>\n        <button onClick={()=>{connectAction()}} > \n        \n          {cnxnStatus}\n        </button>\n      </div>\n      {/* <Wallet></Wallet> */}\n    </div>\n  )\n};\nexport default Index\n\n"]},"metadata":{},"sourceType":"module"}